!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t="length"in e&&e.length,n=G.type(e);return"function"!==n&&!G.isWindow(e)&&(!(1!==e.nodeType||!t)||("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e))}function i(e,t,n){if(G.isFunction(t))return G.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return G.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(oe.test(t))return G.filter(t,e,n);t=G.filter(t,e)}return G.grep(e,function(e){return G.inArray(e,t)>=0!==n})}function r(e,t){do{e=e[t]}while(e&&1!==e.nodeType);return e}function o(){ae.addEventListener?(ae.removeEventListener("DOMContentLoaded",s,!1),e.removeEventListener("load",s,!1)):(ae.detachEvent("onreadystatechange",s),e.detachEvent("onload",s))}function s(){(ae.addEventListener||"load"===event.type||"complete"===ae.readyState)&&(o(),G.ready())}function a(e,t,n){if(void 0===n&&1===e.nodeType){var i="data-"+t.replace(ve,"-$1").toLowerCase();if("string"==typeof(n=e.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:me.test(n)?G.parseJSON(n):n)}catch(e){}G.data(e,t,n)}else n=void 0}return n}function l(e){var t;for(t in e)if(("data"!==t||!G.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function c(e,t,n,i){if(G.acceptData(e)){var r,o,s=G.expando,a=e.nodeType,l=a?G.cache:e,c=a?e[s]:e[s]&&s;if(c&&l[c]&&(i||l[c].data)||void 0!==n||"string"!=typeof t)return c||(c=a?e[s]=R.pop()||G.guid++:s),l[c]||(l[c]=a?{}:{toJSON:G.noop}),"object"!=typeof t&&"function"!=typeof t||(i?l[c]=G.extend(l[c],t):l[c].data=G.extend(l[c].data,t)),o=l[c],i||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[G.camelCase(t)]=n),"string"==typeof t?null==(r=o[t])&&(r=o[G.camelCase(t)]):r=o,r}}function u(e,t,n){if(G.acceptData(e)){var i,r,o=e.nodeType,s=o?G.cache:e,a=o?e[G.expando]:G.expando;if(s[a]){if(t&&(i=n?s[a]:s[a].data)){r=(t=G.isArray(t)?t.concat(G.map(t,G.camelCase)):t in i?[t]:(t=G.camelCase(t))in i?[t]:t.split(" ")).length;for(;r--;)delete i[t[r]];if(n?!l(i):!G.isEmptyObject(i))return}(n||(delete s[a].data,l(s[a])))&&(o?G.cleanData([e],!0):Z.deleteExpando||s!=s.window?delete s[a]:s[a]=null)}}}function h(){return!0}function d(){return!1}function p(){try{return ae.activeElement}catch(e){}}function f(e){var t=Se.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function g(e,t){var n,i,r=0,o=typeof e.getElementsByTagName!==ge?e.getElementsByTagName(t||"*"):typeof e.querySelectorAll!==ge?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(i=n[r]);r++)!t||G.nodeName(i,t)?o.push(i):G.merge(o,g(i,t));return void 0===t||t&&G.nodeName(e,t)?G.merge([e],o):o}function m(e){_e.test(e.type)&&(e.defaultChecked=e.checked)}function v(e,t){return G.nodeName(e,"table")&&G.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function y(e){return e.type=(null!==G.find.attr(e,"type"))+"/"+e.type,e}function x(e){var t=Pe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function w(e,t){for(var n,i=0;null!=(n=e[i]);i++)G._data(n,"globalEval",!t||G._data(t[i],"globalEval"))}function b(e,t){if(1===t.nodeType&&G.hasData(e)){var n,i,r,o=G._data(e),s=G._data(t,o),a=o.events;if(a){delete s.handle,s.events={};for(n in a)for(i=0,r=a[n].length;i<r;i++)G.event.add(t,n,a[n][i])}s.data&&(s.data=G.extend({},s.data))}}function _(e,t){var n,i,r;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!Z.noCloneEvent&&t[G.expando]){r=G._data(t);for(i in r.events)G.removeEvent(t,i,r.handle);t.removeAttribute(G.expando)}"script"===n&&t.text!==e.text?(y(t).text=e.text,x(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),Z.html5Clone&&e.innerHTML&&!G.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&_e.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}function C(t,n){var i,r=G(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(i=e.getDefaultComputedStyle(r[0]))?i.display:G.css(r[0],"display");return r.detach(),o}function T(e){var t=ae,n=Ie[e];return n||("none"!==(n=C(e,t))&&n||((t=((Be=(Be||G("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentWindow||Be[0].contentDocument).document).write(),t.close(),n=C(e,t),Be.detach()),Ie[e]=n),n}function E(e,t){return{get:function(){var n=e();if(null!=n){if(!n)return(this.get=t).apply(this,arguments);delete this.get}}}}function N(e,t){if(t in e)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),i=t,r=it.length;r--;)if((t=it[r]+n)in e)return t;return i}function k(e,t){for(var n,i,r,o=[],s=0,a=e.length;s<a;s++)(i=e[s]).style&&(o[s]=G._data(i,"olddisplay"),n=i.style.display,t?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&we(i)&&(o[s]=G._data(i,"olddisplay",T(i.nodeName)))):(r=we(i),(n&&"none"!==n||!r)&&G._data(i,"olddisplay",r?n:G.css(i,"display"))));for(s=0;s<a;s++)(i=e[s]).style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?o[s]||"":"none"));return e}function S(e,t,n){var i=Ke.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function D(e,t,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===t?1:0,s=0;o<4;o+=2)"margin"===n&&(s+=G.css(e,n+xe[o],!0,r)),i?("content"===n&&(s-=G.css(e,"padding"+xe[o],!0,r)),"margin"!==n&&(s-=G.css(e,"border"+xe[o]+"Width",!0,r))):(s+=G.css(e,"padding"+xe[o],!0,r),"padding"!==n&&(s+=G.css(e,"border"+xe[o]+"Width",!0,r)));return s}function j(e,t,n){var i=!0,r="width"===t?e.offsetWidth:e.offsetHeight,o=Xe(e),s=Z.boxSizing&&"border-box"===G.css(e,"boxSizing",!1,o);if(r<=0||null==r){if(((r=Ue(e,t,o))<0||null==r)&&(r=e.style[t]),Qe.test(r))return r;i=s&&(Z.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+D(e,t,n||(s?"border":"content"),i,o)+"px"}function A(e,t,n,i,r){return new A.prototype.init(e,t,n,i,r)}function $(){return setTimeout(function(){rt=void 0}),rt=G.now()}function L(e,t){var n,i={height:e},r=0;for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=xe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function H(e,t,n){for(var i,r=(ut[t]||[]).concat(ut["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function z(e,t,n){var i,r,o=0,s=ct.length,a=G.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=rt||$(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:G.extend({},t),opts:G.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:rt||$(),duration:n.duration,tweens:[],createTween:function(t,n){var i=G.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?a.resolveWith(e,[c,t]):a.rejectWith(e,[c,t]),this}}),u=c.props;for(function(e,t){var n,i,r,o,s;for(n in e)if(i=G.camelCase(n),r=t[i],o=e[n],G.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=G.cssHooks[i])&&"expand"in s){o=s.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}(u,c.opts.specialEasing);o<s;o++)if(i=ct[o].call(c,e,u,c.opts))return i;return G.map(u,H,c),G.isFunction(c.opts.start)&&c.opts.start.call(e,c),G.fx.timer(G.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function M(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(he)||[];if(G.isFunction(n))for(;i=o[r++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function q(e,t,n,i){function r(a){var l;return o[a]=!0,G.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),r(c),!1)}),l}var o={},s=e===Lt;return r(t.dataTypes[0])||!o["*"]&&r("*")}function O(e,t){var n,i,r=G.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n||(n={}))[i]=t[i]);return n&&G.extend(!0,e,n),e}function P(e,t,n,i){var r;if(G.isArray(t))G.each(t,function(t,r){n||Mt.test(e)?i(e,r):P(e+"["+("object"==typeof r?t:"")+"]",r,n,i)});else if(n||"object"!==G.type(t))i(e,t);else for(r in t)P(e+"["+r+"]",t[r],n,i)}function F(){try{return new e.XMLHttpRequest}catch(e){}}function W(e){return G.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}var R=[],B=R.slice,I=R.concat,X=R.push,U=R.indexOf,V={},Q=V.toString,Y=V.hasOwnProperty,Z={},G=function(e,t){return new G.fn.init(e,t)},J=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,K=/^-ms-/,ee=/-([\da-z])/gi,te=function(e,t){return t.toUpperCase()};G.fn=G.prototype={jquery:"1.11.3",constructor:G,selector:"",length:0,toArray:function(){return B.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:B.call(this)},pushStack:function(e){var t=G.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return G.each(this,e,t)},map:function(e){return this.pushStack(G.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(B.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:X,sort:R.sort,splice:R.splice},G.extend=G.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||G.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(r=arguments[a]))for(i in r)e=s[i],s!==(n=r[i])&&(c&&n&&(G.isPlainObject(n)||(t=G.isArray(n)))?(t?(t=!1,o=e&&G.isArray(e)?e:[]):o=e&&G.isPlainObject(e)?e:{},s[i]=G.extend(c,o,n)):void 0!==n&&(s[i]=n));return s},G.extend({expando:"jQuery"+("1.11.3"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===G.type(e)},isArray:Array.isArray||function(e){return"array"===G.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!G.isArray(e)&&e-parseFloat(e)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==G.type(e)||e.nodeType||G.isWindow(e))return!1;try{if(e.constructor&&!Y.call(e,"constructor")&&!Y.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(Z.ownLast)for(t in e)return Y.call(e,t);for(t in e);return void 0===t||Y.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?V[Q.call(e)]||"object":typeof e},globalEval:function(t){t&&G.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(K,"ms-").replace(ee,te)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,i){var r=0,o=e.length,s=n(e);if(i){if(s)for(;r<o&&!1!==t.apply(e[r],i);r++);else for(r in e)if(!1===t.apply(e[r],i))break}else if(s)for(;r<o&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(J,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?G.merge(i,"string"==typeof e?[e]:e):X.call(i,e)),i},inArray:function(e,t,n){var i;if(t){if(U)return U.call(t,e,n);for(i=t.length,n=n?n<0?Math.max(0,i+n):n:0;n<i;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;)e[r++]=t[i++];if(n!=n)for(;void 0!==t[i];)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,i){var r,o=0,s=e.length,a=[];if(n(e))for(;o<s;o++)null!=(r=t(e[o],o,i))&&a.push(r);else for(o in e)null!=(r=t(e[o],o,i))&&a.push(r);return I.apply([],a)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(r=e[t],t=e,e=r),G.isFunction(e))return n=B.call(arguments,2),i=function(){return e.apply(t||this,n.concat(B.call(arguments)))},i.guid=e.guid=e.guid||G.guid++,i},now:function(){return+new Date},support:Z}),G.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){V["[object "+t+"]"]=t.toLowerCase()});var ne=function(e){function t(e,t,n,i){var r,o,s,a,l,c,h,p,f,g;if((t?t.ownerDocument||t:O)!==j&&D(t),t=t||j,n=n||[],a=t.nodeType,"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return n;if(!i&&$){if(11!==a&&(r=me.exec(e)))if(s=r[1]){if(9===a){if(!(o=t.getElementById(s))||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(s))&&M(t,o)&&o.id===s)return n.push(o),n}else{if(r[2])return Z.apply(n,t.getElementsByTagName(e)),n;if((s=r[3])&&x.getElementsByClassName)return Z.apply(n,t.getElementsByClassName(s)),n}if(x.qsa&&(!L||!L.test(e))){if(p=h=q,f=t,g=1!==a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(c=C(e),(h=t.getAttribute("id"))?p=h.replace(ye,"\\$&"):t.setAttribute("id",p),p="[id='"+p+"'] ",l=c.length;l--;)c[l]=p+d(c[l]);f=ve.test(e)&&u(t.parentNode)||t,g=c.join(",")}if(g)try{return Z.apply(n,f.querySelectorAll(g)),n}catch(e){}finally{h||t.removeAttribute("id")}}}return E(e.replace(se,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[q]=!0,e}function r(e){var t=j.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),i=e.length;i--;)w.attrHandle[n[i]]=t}function s(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||X)-(~e.sourceIndex||X);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return i(function(t){return t=+t,i(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function h(){}function d(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function p(e,t,n){var i=t.dir,r=n&&"parentNode"===i,o=F++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||r)return e(t,n,o)}:function(t,n,s){var a,l,c=[P,o];if(s){for(;t=t[i];)if((1===t.nodeType||r)&&e(t,n,s))return!0}else for(;t=t[i];)if(1===t.nodeType||r){if(l=t[q]||(t[q]={}),(a=l[i])&&a[0]===P&&a[1]===o)return c[2]=a[2];if(l[i]=c,c[2]=e(t,n,s))return!0}}}function f(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function g(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),c&&t.push(a)));return s}function m(e,n,r,o,s,a){return o&&!o[q]&&(o=m(o)),s&&!s[q]&&(s=m(s,a)),i(function(i,a,l,c){var u,h,d,p=[],f=[],m=a.length,v=i||function(e,n,i){for(var r=0,o=n.length;r<o;r++)t(e,n[r],i);return i}(n||"*",l.nodeType?[l]:l,[]),y=!e||!i&&n?v:g(v,p,e,l,c),x=r?s||(i?e:m||o)?[]:a:y;if(r&&r(y,x,l,c),o)for(u=g(x,f),o(u,[],l,c),h=u.length;h--;)(d=u[h])&&(x[f[h]]=!(y[f[h]]=d));if(i){if(s||e){if(s){for(u=[],h=x.length;h--;)(d=x[h])&&u.push(y[h]=d);s(null,x=[],u,c)}for(h=x.length;h--;)(d=x[h])&&(u=s?J(i,d):p[h])>-1&&(i[u]=!(a[u]=d))}}else x=g(x===a?x.splice(m,x.length):x),s?s(null,a,x,c):Z.apply(a,x)})}function v(e){for(var t,n,i,r=e.length,o=w.relative[e[0].type],s=o||w.relative[" "],a=o?1:0,l=p(function(e){return e===t},s,!0),c=p(function(e){return J(t,e)>-1},s,!0),u=[function(e,n,i){var r=!o&&(i||n!==N)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,r}];a<r;a++)if(n=w.relative[e[a].type])u=[p(f(u),n)];else{if((n=w.filter[e[a].type].apply(null,e[a].matches))[q]){for(i=++a;i<r&&!w.relative[e[i].type];i++);return m(a>1&&f(u),a>1&&d(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(se,"$1"),n,a<i&&v(e.slice(a,i)),i<r&&v(e=e.slice(i)),i<r&&d(e))}u.push(n)}return f(u)}var y,x,w,b,_,C,T,E,N,k,S,D,j,A,$,L,H,z,M,q="sizzle"+1*new Date,O=e.document,P=0,F=0,W=n(),R=n(),B=n(),I=function(e,t){return e===t&&(S=!0),0},X=1<<31,U={}.hasOwnProperty,V=[],Q=V.pop,Y=V.push,Z=V.push,G=V.slice,J=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ne=te.replace("w","w#"),ie="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ne+"))|)"+ee+"*\\]",re=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",oe=new RegExp(ee+"+","g"),se=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),ae=new RegExp("^"+ee+"*,"+ee+"*"),le=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),ce=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(re),he=new RegExp("^"+ne+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te.replace("w","w*")+")"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},pe=/^(?:input|select|textarea|button)$/i,fe=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ve=/[+~]/,ye=/'|\\/g,xe=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),we=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},be=function(){D()};try{Z.apply(V=G.call(O.childNodes),O.childNodes),V[O.childNodes.length].nodeType}catch(e){Z={apply:V.length?function(e,t){Y.apply(e,G.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}x=t.support={},_=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:O;return i!==j&&9===i.nodeType&&i.documentElement?(j=i,A=i.documentElement,(n=i.defaultView)&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",be,!1):n.attachEvent&&n.attachEvent("onunload",be)),$=!_(i),x.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=r(function(e){return e.appendChild(i.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=ge.test(i.getElementsByClassName),x.getById=r(function(e){return A.appendChild(e).id=q,!i.getElementsByName||!i.getElementsByName(q).length}),x.getById?(w.find.ID=function(e,t){if(void 0!==t.getElementById&&$){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},w.filter.ID=function(e){var t=e.replace(xe,we);return function(e){return e.getAttribute("id")===t}}):(delete w.find.ID,w.filter.ID=function(e){var t=e.replace(xe,we);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){if($)return t.getElementsByClassName(e)},H=[],L=[],(x.qsa=ge.test(i.querySelectorAll))&&(r(function(e){A.appendChild(e).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||L.push("\\["+ee+"*(?:value|"+K+")"),e.querySelectorAll("[id~="+q+"-]").length||L.push("~="),e.querySelectorAll(":checked").length||L.push(":checked"),e.querySelectorAll("a#"+q+"+*").length||L.push(".#.+[+~]")}),r(function(e){var t=i.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&L.push("name"+ee+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||L.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),L.push(",.*:")})),(x.matchesSelector=ge.test(z=A.matches||A.webkitMatchesSelector||A.mozMatchesSelector||A.oMatchesSelector||A.msMatchesSelector))&&r(function(e){x.disconnectedMatch=z.call(e,"div"),z.call(e,"[s!='']:x"),H.push("!=",re)}),L=L.length&&new RegExp(L.join("|")),H=H.length&&new RegExp(H.join("|")),t=ge.test(A.compareDocumentPosition),M=t||ge.test(A.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},I=t?function(e,t){if(e===t)return S=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===i||e.ownerDocument===O&&M(O,e)?-1:t===i||t.ownerDocument===O&&M(O,t)?1:k?J(k,e)-J(k,t):0:4&n?-1:1)}:function(e,t){if(e===t)return S=!0,0;var n,r=0,o=e.parentNode,a=t.parentNode,l=[e],c=[t];if(!o||!a)return e===i?-1:t===i?1:o?-1:a?1:k?J(k,e)-J(k,t):0;if(o===a)return s(e,t);for(n=e;n=n.parentNode;)l.unshift(n);for(n=t;n=n.parentNode;)c.unshift(n);for(;l[r]===c[r];)r++;return r?s(l[r],c[r]):l[r]===O?-1:c[r]===O?1:0},i):j},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==j&&D(e),n=n.replace(ce,"='$1']"),x.matchesSelector&&$&&(!H||!H.test(n))&&(!L||!L.test(n)))try{var i=z.call(e,n);if(i||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,j,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==j&&D(e),M(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==j&&D(e);var n=w.attrHandle[t.toLowerCase()],i=n&&U.call(w.attrHandle,t.toLowerCase())?n(e,t,!$):void 0;return void 0!==i?i:x.attributes||!$?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(S=!x.detectDuplicates,k=!x.sortStable&&e.slice(0),e.sort(I),S){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return k=null,e},b=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=b(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=b(t);return n},(w=t.selectors={cacheLength:50,createPseudo:i,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,we),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var o=t.attr(r,e);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(oe," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,h,d,p,f,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a;if(m){if(o){for(;g;){for(h=t;h=h[g];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=g="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?m.firstChild:m.lastChild],s&&y){for(p=(c=(u=m[q]||(m[q]={}))[e]||[])[0]===P&&c[1],d=c[0]===P&&c[2],h=p&&m.childNodes[p];h=++p&&h&&h[g]||(d=p=0)||f.pop();)if(1===h.nodeType&&++d&&h===t){u[e]=[P,p,d];break}}else if(y&&(c=(t[q]||(t[q]={}))[e])&&c[0]===P)d=c[1];else for(;(h=++p&&h&&h[g]||(d=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++d||(y&&((h[q]||(h[q]={}))[e]=[P,d]),h!==t)););return(d-=r)===i||d%i==0&&d/i>=0}}},PSEUDO:function(e,n){var r,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[q]?o(n):o.length>1?(r=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=o(e,n),s=r.length;s--;)e[i=J(e,r[s])]=!(t[i]=r[s])}):function(e){return o(e,0,r)}):o}},pseudos:{not:i(function(e){var t=[],n=[],r=T(e.replace(se,"$1"));return r[q]?i(function(e,t,n,i){for(var o,s=r(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(xe,we),function(t){return(t.textContent||t.innerText||b(t)).indexOf(e)>-1}}),lang:i(function(e){return he.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,we).toLowerCase(),function(t){var n;do{if(n=$?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===A},focus:function(e){return e===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return fe.test(e.nodeName)},input:function(e){return pe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,n){return[n<0?n+t:n]}),even:c(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:c(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:c(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:c(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=w.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[y]=a(y);for(y in{submit:!0,reset:!0})w.pseudos[y]=l(y);return h.prototype=w.filters=w.pseudos,w.setFilters=new h,C=t.tokenize=function(e,n){var i,r,o,s,a,l,c,u=R[e+" "];if(u)return n?0:u.slice(0);for(a=e,l=[],c=w.preFilter;a;){i&&!(r=ae.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=le.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(se," ")}),a=a.slice(i.length));for(s in w.filter)!(r=de[s].exec(a))||c[s]&&!(r=c[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?t.error(e):R(e,l).slice(0)},T=t.compile=function(e,n){var r,o=[],s=[],a=B[e+" "];if(!a){for(n||(n=C(e)),r=n.length;r--;)(a=v(n[r]))[q]?o.push(a):s.push(a);(a=B(e,function(e,n){var r=n.length>0,o=e.length>0,s=function(i,s,a,l,c){var u,h,d,p=0,f="0",m=i&&[],v=[],y=N,x=i||o&&w.find.TAG("*",c),b=P+=null==y?1:Math.random()||.1,_=x.length;for(c&&(N=s!==j&&s);f!==_&&null!=(u=x[f]);f++){if(o&&u){for(h=0;d=e[h++];)if(d(u,s,a)){l.push(u);break}c&&(P=b)}r&&((u=!d&&u)&&p--,i&&m.push(u))}if(p+=f,r&&f!==p){for(h=0;d=n[h++];)d(m,v,s,a);if(i){if(p>0)for(;f--;)m[f]||v[f]||(v[f]=Q.call(l));v=g(v)}Z.apply(l,v),c&&!i&&v.length>0&&p+n.length>1&&t.uniqueSort(l)}return c&&(P=b,N=y),m};return r?i(s):s}(s,o))).selector=e}return a},E=t.select=function(e,t,n,i){var r,o,s,a,l,c="function"==typeof e&&e,h=!i&&C(e=c.selector||e);if(n=n||[],1===h.length){if((o=h[0]=h[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&x.getById&&9===t.nodeType&&$&&w.relative[o[1].type]){if(!(t=(w.find.ID(s.matches[0].replace(xe,we),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=de.needsContext.test(e)?0:o.length;r--&&(s=o[r],!w.relative[a=s.type]);)if((l=w.find[a])&&(i=l(s.matches[0].replace(xe,we),ve.test(o[0].type)&&u(t.parentNode)||t))){if(o.splice(r,1),!(e=i.length&&d(o)))return Z.apply(n,i),n;break}}return(c||T(e,h))(i,t,!$,n,ve.test(e)&&u(t.parentNode)||t),n},x.sortStable=q.split("").sort(I).join("")===q,x.detectDuplicates=!!S,D(),x.sortDetached=r(function(e){return 1&e.compareDocumentPosition(j.createElement("div"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(K,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);G.find=ne,G.expr=ne.selectors,G.expr[":"]=G.expr.pseudos,G.unique=ne.uniqueSort,G.text=ne.getText,G.isXMLDoc=ne.isXML,G.contains=ne.contains;var ie=G.expr.match.needsContext,re=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,oe=/^.[^:#\[\.,]*$/;G.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?G.find.matchesSelector(i,e)?[i]:[]:G.find.matches(e,G.grep(t,function(e){return 1===e.nodeType}))},G.fn.extend({find:function(e){var t,n=[],i=this,r=i.length;if("string"!=typeof e)return this.pushStack(G(e).filter(function(){for(t=0;t<r;t++)if(G.contains(i[t],this))return!0}));for(t=0;t<r;t++)G.find(e,i[t],n);return n=this.pushStack(r>1?G.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&ie.test(e)?G(e):e||[],!1).length}});var se,ae=e.document,le=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(G.fn.init=function(e,t){var n,i;if(!e)return this;if("string"==typeof e){if(!(n="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:le.exec(e))||!n[1]&&t)return!t||t.jquery?(t||se).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof G?t[0]:t,G.merge(this,G.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:ae,!0)),re.test(n[1])&&G.isPlainObject(t))for(n in t)G.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}if((i=ae.getElementById(n[2]))&&i.parentNode){if(i.id!==n[2])return se.find(e);this.length=1,this[0]=i}return this.context=ae,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):G.isFunction(e)?void 0!==se.ready?se.ready(e):e(G):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),G.makeArray(e,this))}).prototype=G.fn,se=G(ae);var ce=/^(?:parents|prev(?:Until|All))/,ue={children:!0,contents:!0,next:!0,prev:!0};G.extend({dir:function(e,t,n){for(var i=[],r=e[t];r&&9!==r.nodeType&&(void 0===n||1!==r.nodeType||!G(r).is(n));)1===r.nodeType&&i.push(r),r=r[t];return i},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),G.fn.extend({has:function(e){var t,n=G(e,this),i=n.length;return this.filter(function(){for(t=0;t<i;t++)if(G.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,i=0,r=this.length,o=[],s=ie.test(e)||"string"!=typeof e?G(e,t||this.context):0;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&G.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?G.unique(o):o)},index:function(e){return e?"string"==typeof e?G.inArray(this[0],G(e)):G.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(G.unique(G.merge(this.get(),G(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),G.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return G.dir(e,"parentNode")},parentsUntil:function(e,t,n){return G.dir(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return G.dir(e,"nextSibling")},prevAll:function(e){return G.dir(e,"previousSibling")},nextUntil:function(e,t,n){return G.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return G.dir(e,"previousSibling",n)},siblings:function(e){return G.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return G.sibling(e.firstChild)},contents:function(e){return G.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:G.merge([],e.childNodes)}},function(e,t){G.fn[e]=function(n,i){var r=G.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=G.filter(i,r)),this.length>1&&(ue[e]||(r=G.unique(r)),ce.test(e)&&(r=r.reverse())),this.pushStack(r)}});var he=/\S+/g,de={};G.Callbacks=function(e){var t,n,i,r,o,s,a=[],l=!(e="string"==typeof e?de[e]||function(e){var t=de[e]={};return G.each(e.match(he)||[],function(e,n){t[n]=!0}),t}(e):G.extend({},e)).once&&[],c=function(h){for(n=e.memory&&h,i=!0,o=s||0,s=0,r=a.length,t=!0;a&&o<r;o++)if(!1===a[o].apply(h[0],h[1])&&e.stopOnFalse){n=!1;break}t=!1,a&&(l?l.length&&c(l.shift()):n?a=[]:u.disable())},u={add:function(){if(a){var i=a.length;!function t(n){G.each(n,function(n,i){var r=G.type(i);"function"===r?e.unique&&u.has(i)||a.push(i):i&&i.length&&"string"!==r&&t(i)})}(arguments),t?r=a.length:n&&(s=i,c(n))}return this},remove:function(){return a&&G.each(arguments,function(e,n){for(var i;(i=G.inArray(n,a,i))>-1;)a.splice(i,1),t&&(i<=r&&r--,i<=o&&o--)}),this},has:function(e){return e?G.inArray(e,a)>-1:!(!a||!a.length)},empty:function(){return a=[],r=0,this},disable:function(){return a=l=n=void 0,this},disabled:function(){return!a},lock:function(){return l=void 0,n||u.disable(),this},locked:function(){return!l},fireWith:function(e,n){return!a||i&&!l||(n=[e,(n=n||[]).slice?n.slice():n],t?l.push(n):c(n)),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},G.extend({Deferred:function(e){var t=[["resolve","done",G.Callbacks("once memory"),"resolved"],["reject","fail",G.Callbacks("once memory"),"rejected"],["notify","progress",G.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var e=arguments;return G.Deferred(function(n){G.each(t,function(t,o){var s=G.isFunction(e[t])&&e[t];r[o[1]](function(){var e=s&&s.apply(this,arguments);e&&G.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===i?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?G.extend(e,i):i}},r={};return i.pipe=i.then,G.each(t,function(e,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),e&&e.call(r,r),r},when:function(e){var t,n,i,r=0,o=B.call(arguments),s=o.length,a=1!==s||e&&G.isFunction(e.promise)?s:0,l=1===a?e:G.Deferred(),c=function(e,n,i){return function(r){n[e]=this,i[e]=arguments.length>1?B.call(arguments):r,i===t?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(t=new Array(s),n=new Array(s),i=new Array(s);r<s;r++)o[r]&&G.isFunction(o[r].promise)?o[r].promise().done(c(r,i,o)).fail(l.reject).progress(c(r,n,t)):--a;return a||l.resolveWith(i,o),l.promise()}});var pe;G.fn.ready=function(e){return G.ready.promise().done(e),this},G.extend({isReady:!1,readyWait:1,holdReady:function(e){e?G.readyWait++:G.ready(!0)},ready:function(e){if(!0===e?!--G.readyWait:!G.isReady){if(!ae.body)return setTimeout(G.ready);G.isReady=!0,!0!==e&&--G.readyWait>0||(pe.resolveWith(ae,[G]),G.fn.triggerHandler&&(G(ae).triggerHandler("ready"),G(ae).off("ready")))}}}),G.ready.promise=function(t){if(!pe)if(pe=G.Deferred(),"complete"===ae.readyState)setTimeout(G.ready);else if(ae.addEventListener)ae.addEventListener("DOMContentLoaded",s,!1),e.addEventListener("load",s,!1);else{ae.attachEvent("onreadystatechange",s),e.attachEvent("onload",s);var n=!1;try{n=null==e.frameElement&&ae.documentElement}catch(e){}n&&n.doScroll&&function e(){if(!G.isReady){try{n.doScroll("left")}catch(t){return setTimeout(e,50)}o(),G.ready()}}()}return pe.promise(t)};var fe,ge="undefined";for(fe in G(Z))break;Z.ownLast="0"!==fe,Z.inlineBlockNeedsLayout=!1,G(function(){var e,t,n,i;(n=ae.getElementsByTagName("body")[0])&&n.style&&(t=ae.createElement("div"),(i=ae.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),typeof t.style.zoom!==ge&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",Z.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(i))}),function(){var e=ae.createElement("div");if(null==Z.deleteExpando){Z.deleteExpando=!0;try{delete e.test}catch(e){Z.deleteExpando=!1}}e=null}(),G.acceptData=function(e){var t=G.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||!0!==t&&e.getAttribute("classid")===t)};var me=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ve=/([A-Z])/g;G.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return!!(e=e.nodeType?G.cache[e[G.expando]]:e[G.expando])&&!l(e)},data:function(e,t,n){return c(e,t,n)},removeData:function(e,t){return u(e,t)},_data:function(e,t,n){return c(e,t,n,!0)},_removeData:function(e,t){return u(e,t,!0)}}),G.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=G.data(o),1===o.nodeType&&!G._data(o,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&a(o,i=G.camelCase(i.slice(5)),r[i]);G._data(o,"parsedAttrs",!0)}return r}return"object"==typeof e?this.each(function(){G.data(this,e)}):arguments.length>1?this.each(function(){G.data(this,e,t)}):o?a(o,e,G.data(o,e)):void 0},removeData:function(e){return this.each(function(){G.removeData(this,e)})}}),G.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=G._data(e,t),n&&(!i||G.isArray(n)?i=G._data(e,t,G.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=G.queue(e,t),i=n.length,r=n.shift(),o=G._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){G.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return G._data(e,n)||G._data(e,n,{empty:G.Callbacks("once memory").add(function(){G._removeData(e,t+"queue"),G._removeData(e,n)})})}}),G.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?G.queue(this[0],e):void 0===t?this:this.each(function(){var n=G.queue(this,e,t);G._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&G.dequeue(this,e)})},dequeue:function(e){return this.each(function(){G.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=G.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=G._data(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ye=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,xe=["Top","Right","Bottom","Left"],we=function(e,t){return e=t||e,"none"===G.css(e,"display")||!G.contains(e.ownerDocument,e)},be=G.access=function(e,t,n,i,r,o,s){var a=0,l=e.length,c=null==n;if("object"===G.type(n)){r=!0;for(a in n)G.access(e,t,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,G.isFunction(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(G(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):l?t(e[0],n):o},_e=/^(?:checkbox|radio)$/i;!function(){var e=ae.createElement("input"),t=ae.createElement("div"),n=ae.createDocumentFragment();if(t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",Z.leadingWhitespace=3===t.firstChild.nodeType,Z.tbody=!t.getElementsByTagName("tbody").length,Z.htmlSerialize=!!t.getElementsByTagName("link").length,Z.html5Clone="<:nav></:nav>"!==ae.createElement("nav").cloneNode(!0).outerHTML,e.type="checkbox",e.checked=!0,n.appendChild(e),Z.appendChecked=e.checked,t.innerHTML="<textarea>x</textarea>",Z.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,n.appendChild(t),t.innerHTML="<input type='radio' checked='checked' name='t'/>",Z.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,Z.noCloneEvent=!0,t.attachEvent&&(t.attachEvent("onclick",function(){Z.noCloneEvent=!1}),t.cloneNode(!0).click()),null==Z.deleteExpando){Z.deleteExpando=!0;try{delete t.test}catch(e){Z.deleteExpando=!1}}}(),function(){var t,n,i=ae.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(Z[t+"Bubbles"]=n in e)||(i.setAttribute(n,"t"),Z[t+"Bubbles"]=!1===i.attributes[n].expando);i=null}();var Ce=/^(?:input|select|textarea)$/i,Te=/^key/,Ee=/^(?:mouse|pointer|contextmenu)|click/,Ne=/^(?:focusinfocus|focusoutblur)$/,ke=/^([^.]*)(?:\.(.+)|)$/;G.event={global:{},add:function(e,t,n,i,r){var o,s,a,l,c,u,h,d,p,f,g,m=G._data(e);if(m){for(n.handler&&(n=(l=n).handler,r=l.selector),n.guid||(n.guid=G.guid++),(s=m.events)||(s=m.events={}),(u=m.handle)||((u=m.handle=function(e){return typeof G===ge||e&&G.event.triggered===e.type?void 0:G.event.dispatch.apply(u.elem,arguments)}).elem=e),a=(t=(t||"").match(he)||[""]).length;a--;)p=g=(o=ke.exec(t[a])||[])[1],f=(o[2]||"").split(".").sort(),p&&(c=G.event.special[p]||{},p=(r?c.delegateType:c.bindType)||p,c=G.event.special[p]||{},h=G.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&G.expr.match.needsContext.test(r),namespace:f.join(".")},l),(d=s[p])||((d=s[p]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,i,f,u)||(e.addEventListener?e.addEventListener(p,u,!1):e.attachEvent&&e.attachEvent("on"+p,u))),c.add&&(c.add.call(e,h),h.handler.guid||(h.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,h):d.push(h),G.event.global[p]=!0);e=null}},remove:function(e,t,n,i,r){var o,s,a,l,c,u,h,d,p,f,g,m=G.hasData(e)&&G._data(e);if(m&&(u=m.events)){for(c=(t=(t||"").match(he)||[""]).length;c--;)if(a=ke.exec(t[c])||[],p=g=a[1],f=(a[2]||"").split(".").sort(),p){for(h=G.event.special[p]||{},d=u[p=(i?h.delegateType:h.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=d.length;o--;)s=d[o],!r&&g!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||i&&i!==s.selector&&("**"!==i||!s.selector)||(d.splice(o,1),s.selector&&d.delegateCount--,h.remove&&h.remove.call(e,s));l&&!d.length&&(h.teardown&&!1!==h.teardown.call(e,f,m.handle)||G.removeEvent(e,p,m.handle),delete u[p])}else for(p in u)G.event.remove(e,p+t[c],n,i,!0);G.isEmptyObject(u)&&(delete m.handle,G._removeData(e,"events"))}},trigger:function(t,n,i,r){var o,s,a,l,c,u,h,d=[i||ae],p=Y.call(t,"type")?t.type:t,f=Y.call(t,"namespace")?t.namespace.split("."):[];if(a=u=i=i||ae,3!==i.nodeType&&8!==i.nodeType&&!Ne.test(p+G.event.triggered)&&(p.indexOf(".")>=0&&(p=(f=p.split(".")).shift(),f.sort()),s=p.indexOf(":")<0&&"on"+p,t=t[G.expando]?t:new G.Event(p,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=f.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:G.makeArray(n,[t]),c=G.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(i,n))){if(!r&&!c.noBubble&&!G.isWindow(i)){for(l=c.delegateType||p,Ne.test(l+p)||(a=a.parentNode);a;a=a.parentNode)d.push(a),u=a;u===(i.ownerDocument||ae)&&d.push(u.defaultView||u.parentWindow||e)}for(h=0;(a=d[h++])&&!t.isPropagationStopped();)t.type=h>1?l:c.bindType||p,(o=(G._data(a,"events")||{})[t.type]&&G._data(a,"handle"))&&o.apply(a,n),(o=s&&a[s])&&o.apply&&G.acceptData(a)&&(t.result=o.apply(a,n),!1===t.result&&t.preventDefault());if(t.type=p,!r&&!t.isDefaultPrevented()&&(!c._default||!1===c._default.apply(d.pop(),n))&&G.acceptData(i)&&s&&i[p]&&!G.isWindow(i)){(u=i[s])&&(i[s]=null),G.event.triggered=p;try{i[p]()}catch(e){}G.event.triggered=void 0,u&&(i[s]=u)}return t.result}},dispatch:function(e){e=G.event.fix(e);var t,n,i,r,o,s=[],a=B.call(arguments),l=(G._data(this,"events")||{})[e.type]||[],c=G.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,e)){for(s=G.event.handlers.call(this,e,l),t=0;(r=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,o=0;(i=r.handlers[o++])&&!e.isImmediatePropagationStopped();)e.namespace_re&&!e.namespace_re.test(i.namespace)||(e.handleObj=i,e.data=i.data,void 0!==(n=((G.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,a))&&!1===(e.result=n)&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,r,o,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(r=[],o=0;o<a;o++)void 0===r[n=(i=t[o]).selector+" "]&&(r[n]=i.needsContext?G(n,this).index(l)>=0:G.find(n,this,null,[l]).length),r[n]&&r.push(i);r.length&&s.push({elem:l,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},fix:function(e){if(e[G.expando])return e;var t,n,i,r=e.type,o=e,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=Ee.test(r)?this.mouseHooks:Te.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,e=new G.Event(o),t=i.length;t--;)e[n=i[t]]=o[n];return e.target||(e.target=o.srcElement||ae),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,r,o=t.button,s=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=(i=e.target.ownerDocument||ae).documentElement,n=i.body,e.pageX=t.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&s&&(e.relatedTarget=s===e.target?t.toElement:s),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==p()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===p()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(G.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return G.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,i){var r=G.extend(new G.Event,n,{type:e,isSimulated:!0,originalEvent:{}});i?G.event.trigger(r,null,t):G.event.dispatch.call(t,r),r.isDefaultPrevented()&&n.preventDefault()}},G.removeEvent=ae.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var i="on"+t;e.detachEvent&&(typeof e[i]===ge&&(e[i]=null),e.detachEvent(i,n))},G.Event=function(e,t){if(!(this instanceof G.Event))return new G.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?h:d):this.type=e,t&&G.extend(this,t),this.timeStamp=e&&e.timeStamp||G.now(),this[G.expando]=!0},G.Event.prototype={isDefaultPrevented:d,isPropagationStopped:d,isImmediatePropagationStopped:d,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=h,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=h,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=h,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},G.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){G.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||G.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),Z.submitBubbles||(G.event.special.submit={setup:function(){if(G.nodeName(this,"form"))return!1;G.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=G.nodeName(t,"input")||G.nodeName(t,"button")?t.form:void 0;n&&!G._data(n,"submitBubbles")&&(G.event.add(n,"submit._submit",function(e){e._submit_bubble=!0}),G._data(n,"submitBubbles",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&G.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){if(G.nodeName(this,"form"))return!1;G.event.remove(this,"._submit")}}),Z.changeBubbles||(G.event.special.change={setup:function(){if(Ce.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(G.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),G.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),G.event.simulate("change",this,e,!0)})),!1;G.event.add(this,"beforeactivate._change",function(e){var t=e.target;Ce.test(t.nodeName)&&!G._data(t,"changeBubbles")&&(G.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||G.event.simulate("change",this.parentNode,e,!0)}),G._data(t,"changeBubbles",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return G.event.remove(this,"._change"),!Ce.test(this.nodeName)}}),Z.focusinBubbles||G.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){G.event.simulate(t,e.target,G.event.fix(e),!0)};G.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=G._data(i,t);r||i.addEventListener(e,n,!0),G._data(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=G._data(i,t)-1;r?G._data(i,t,r):(i.removeEventListener(e,n,!0),G._removeData(i,t))}}}),G.fn.extend({on:function(e,t,n,i,r){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(o in e)this.on(o,t,n,e[o],r);return this}if(null==n&&null==i?(i=t,n=t=void 0):null==i&&("string"==typeof t?(i=n,n=void 0):(i=n,n=t,t=void 0)),!1===i)i=d;else if(!i)return this;return 1===r&&(s=i,(i=function(e){return G().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=G.guid++)),this.each(function(){G.event.add(this,e,i,n,t)})},one:function(e,t,n,i){return this.on(e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,G(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=d),this.each(function(){G.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){G.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return G.event.trigger(e,t,n,!0)}});var Se="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",De=/ jQuery\d+="(?:null|\d+)"/g,je=new RegExp("<(?:"+Se+")[\\s/>]","i"),Ae=/^\s+/,$e=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Le=/<([\w:]+)/,He=/<tbody/i,ze=/<|&#?\w+;/,Me=/<(?:script|style|link)/i,qe=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^$|\/(?:java|ecma)script/i,Pe=/^true\/(.*)/,Fe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,We={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:Z.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Re=f(ae).appendChild(ae.createElement("div"));We.optgroup=We.option,We.tbody=We.tfoot=We.colgroup=We.caption=We.thead,We.th=We.td,G.extend({clone:function(e,t,n){var i,r,o,s,a,l=G.contains(e.ownerDocument,e);if(Z.html5Clone||G.isXMLDoc(e)||!je.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Re.innerHTML=e.outerHTML,Re.removeChild(o=Re.firstChild)),!(Z.noCloneEvent&&Z.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||G.isXMLDoc(e)))for(i=g(o),a=g(e),s=0;null!=(r=a[s]);++s)i[s]&&_(r,i[s]);if(t)if(n)for(a=a||g(e),i=i||g(o),s=0;null!=(r=a[s]);s++)b(r,i[s]);else b(e,o);return(i=g(o,"script")).length>0&&w(i,!l&&g(e,"script")),i=a=r=null,o},buildFragment:function(e,t,n,i){for(var r,o,s,a,l,c,u,h=e.length,d=f(t),p=[],v=0;v<h;v++)if((o=e[v])||0===o)if("object"===G.type(o))G.merge(p,o.nodeType?[o]:o);else if(ze.test(o)){for(a=a||d.appendChild(t.createElement("div")),l=(Le.exec(o)||["",""])[1].toLowerCase(),u=We[l]||We._default,a.innerHTML=u[1]+o.replace($e,"<$1></$2>")+u[2],r=u[0];r--;)a=a.lastChild;if(!Z.leadingWhitespace&&Ae.test(o)&&p.push(t.createTextNode(Ae.exec(o)[0])),!Z.tbody)for(r=(o="table"!==l||He.test(o)?"<table>"!==u[1]||He.test(o)?0:a:a.firstChild)&&o.childNodes.length;r--;)G.nodeName(c=o.childNodes[r],"tbody")&&!c.childNodes.length&&o.removeChild(c);for(G.merge(p,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=d.lastChild}else p.push(t.createTextNode(o));for(a&&d.removeChild(a),Z.appendChecked||G.grep(g(p,"input"),m),v=0;o=p[v++];)if((!i||-1===G.inArray(o,i))&&(s=G.contains(o.ownerDocument,o),a=g(d.appendChild(o),"script"),s&&w(a),n))for(r=0;o=a[r++];)Oe.test(o.type||"")&&n.push(o);return a=null,d},cleanData:function(e,t){for(var n,i,r,o,s=0,a=G.expando,l=G.cache,c=Z.deleteExpando,u=G.event.special;null!=(n=e[s]);s++)if((t||G.acceptData(n))&&(r=n[a],o=r&&l[r])){if(o.events)for(i in o.events)u[i]?G.event.remove(n,i):G.removeEvent(n,i,o.handle);l[r]&&(delete l[r],c?delete n[a]:typeof n.removeAttribute!==ge?n.removeAttribute(a):n[a]=null,R.push(r))}}}),G.fn.extend({text:function(e){return be(this,function(e){return void 0===e?G.text(this):this.empty().append((this[0]&&this[0].ownerDocument||ae).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){v(this,e).appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,i=e?G.filter(e,this):this,r=0;null!=(n=i[r]);r++)t||1!==n.nodeType||G.cleanData(g(n)),n.parentNode&&(t&&G.contains(n.ownerDocument,n)&&w(g(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&G.cleanData(g(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&G.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return G.clone(this,e,t)})},html:function(e){return be(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(De,""):void 0;if("string"==typeof e&&!Me.test(e)&&(Z.htmlSerialize||!je.test(e))&&(Z.leadingWhitespace||!Ae.test(e))&&!We[(Le.exec(e)||["",""])[1].toLowerCase()]){e=e.replace($e,"<$1></$2>");try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(G.cleanData(g(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,G.cleanData(g(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=I.apply([],e);var n,i,r,o,s,a,l=0,c=this.length,u=this,h=c-1,d=e[0],p=G.isFunction(d);if(p||c>1&&"string"==typeof d&&!Z.checkClone&&qe.test(d))return this.each(function(n){var i=u.eq(n);p&&(e[0]=d.call(this,n,i.html())),i.domManip(e,t)});if(c&&(a=G.buildFragment(e,this[0].ownerDocument,!1,this),n=a.firstChild,1===a.childNodes.length&&(a=n),n)){for(r=(o=G.map(g(a,"script"),y)).length;l<c;l++)i=a,l!==h&&(i=G.clone(i,!0,!0),r&&G.merge(o,g(i,"script"))),t.call(this[l],i,l);if(r)for(s=o[o.length-1].ownerDocument,G.map(o,x),l=0;l<r;l++)i=o[l],Oe.test(i.type||"")&&!G._data(i,"globalEval")&&G.contains(s,i)&&(i.src?G._evalUrl&&G._evalUrl(i.src):G.globalEval((i.text||i.textContent||i.innerHTML||"").replace(Fe,"")));a=n=null}return this}}),G.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){G.fn[e]=function(e){for(var n,i=0,r=[],o=G(e),s=o.length-1;i<=s;i++)n=i===s?this:this.clone(!0),G(o[i])[t](n),X.apply(r,n.get());return this.pushStack(r)}});var Be,Ie={};!function(){var e;Z.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,i;return(n=ae.getElementsByTagName("body")[0])&&n.style?(t=ae.createElement("div"),i=ae.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),typeof t.style.zoom!==ge&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(ae.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(i),e):void 0}}();var Xe,Ue,Ve=/^margin/,Qe=new RegExp("^("+ye+")(?!px)[a-z%]+$","i"),Ye=/^(top|right|bottom|left)$/;e.getComputedStyle?(Xe=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)},Ue=function(e,t,n){var i,r,o,s,a=e.style;return n=n||Xe(e),s=n?n.getPropertyValue(t)||n[t]:void 0,n&&(""!==s||G.contains(e.ownerDocument,e)||(s=G.style(e,t)),Qe.test(s)&&Ve.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0===s?s:s+""}):ae.documentElement.currentStyle&&(Xe=function(e){return e.currentStyle},Ue=function(e,t,n){var i,r,o,s,a=e.style;return n=n||Xe(e),null==(s=n?n[t]:void 0)&&a&&a[t]&&(s=a[t]),Qe.test(s)&&!Ye.test(t)&&(i=a.left,(o=(r=e.runtimeStyle)&&r.left)&&(r.left=e.currentStyle.left),a.left="fontSize"===t?"1em":s,s=a.pixelLeft+"px",a.left=i,o&&(r.left=o)),void 0===s?s:s+""||"auto"}),function(){function t(){var t,n,i,r;(n=ae.getElementsByTagName("body")[0])&&n.style&&(t=ae.createElement("div"),(i=ae.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),t.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o=s=!1,l=!0,e.getComputedStyle&&(o="1%"!==(e.getComputedStyle(t,null)||{}).top,s="4px"===(e.getComputedStyle(t,null)||{width:"4px"}).width,(r=t.appendChild(ae.createElement("div"))).style.cssText=t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",r.style.marginRight=r.style.width="0",t.style.width="1px",l=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight),t.removeChild(r)),t.innerHTML="<table><tr><td></td><td>t</td></tr></table>",(r=t.getElementsByTagName("td"))[0].style.cssText="margin:0;border:0;padding:0;display:none",(a=0===r[0].offsetHeight)&&(r[0].style.display="",r[1].style.display="none",a=0===r[0].offsetHeight),n.removeChild(i))}var n,i,r,o,s,a,l;(n=ae.createElement("div")).innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",(i=(r=n.getElementsByTagName("a")[0])&&r.style)&&(i.cssText="float:left;opacity:.5",Z.opacity="0.5"===i.opacity,Z.cssFloat=!!i.cssFloat,n.style.backgroundClip="content-box",n.cloneNode(!0).style.backgroundClip="",Z.clearCloneStyle="content-box"===n.style.backgroundClip,Z.boxSizing=""===i.boxSizing||""===i.MozBoxSizing||""===i.WebkitBoxSizing,G.extend(Z,{reliableHiddenOffsets:function(){return null==a&&t(),a},boxSizingReliable:function(){return null==s&&t(),s},pixelPosition:function(){return null==o&&t(),o},reliableMarginRight:function(){return null==l&&t(),l}}))}(),G.swap=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=s[o];return r};var Ze=/alpha\([^)]*\)/i,Ge=/opacity\s*=\s*([^)]*)/,Je=/^(none|table(?!-c[ea]).+)/,Ke=new RegExp("^("+ye+")(.*)$","i"),et=new RegExp("^([+-])=("+ye+")","i"),tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"},it=["Webkit","O","Moz","ms"];G.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:Z.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=G.camelCase(t),l=e.style;if(t=G.cssProps[a]||(G.cssProps[a]=N(l,a)),s=G.cssHooks[t]||G.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:l[t];if("string"==(o=typeof n)&&(r=et.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(G.css(e,t)),o="number"),null!=n&&n==n&&("number"!==o||G.cssNumber[a]||(n+="px"),Z.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(e,n,i)))))try{l[t]=n}catch(e){}}},css:function(e,t,n,i){var r,o,s,a=G.camelCase(t);return t=G.cssProps[a]||(G.cssProps[a]=N(e.style,a)),(s=G.cssHooks[t]||G.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Ue(e,t,i)),"normal"===o&&t in nt&&(o=nt[t]),""===n||n?(r=parseFloat(o),!0===n||G.isNumeric(r)?r||0:o):o}}),G.each(["height","width"],function(e,t){G.cssHooks[t]={get:function(e,n,i){if(n)return Je.test(G.css(e,"display"))&&0===e.offsetWidth?G.swap(e,tt,function(){return j(e,t,i)}):j(e,t,i)},set:function(e,n,i){var r=i&&Xe(e);return S(0,n,i?D(e,t,i,Z.boxSizing&&"border-box"===G.css(e,"boxSizing",!1,r),r):0)}}}),Z.opacity||(G.cssHooks.opacity={get:function(e,t){return Ge.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,i=e.currentStyle,r=G.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=i&&i.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===G.trim(o.replace(Ze,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||i&&!i.filter)||(n.filter=Ze.test(o)?o.replace(Ze,r):o+" "+r)}}),G.cssHooks.marginRight=E(Z.reliableMarginRight,function(e,t){if(t)return G.swap(e,{display:"inline-block"},Ue,[e,"marginRight"])}),G.each({margin:"",padding:"",border:"Width"},function(e,t){G.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+xe[i]+t]=o[i]||o[i-2]||o[0];return r}},Ve.test(e)||(G.cssHooks[e+t].set=S)}),G.fn.extend({css:function(e,t){return be(this,function(e,t,n){var i,r,o={},s=0;if(G.isArray(t)){for(i=Xe(e),r=t.length;s<r;s++)o[t[s]]=G.css(e,t[s],!1,i);return o}return void 0!==n?G.style(e,t,n):G.css(e,t)},e,t,arguments.length>1)},show:function(){return k(this,!0)},hide:function(){return k(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){we(this)?G(this).show():G(this).hide()})}}),G.Tween=A,(A.prototype={constructor:A,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||"swing",this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(G.cssNumber[n]?"":"px")},cur:function(){var e=A.propHooks[this.prop];return e&&e.get?e.get(this):A.propHooks._default.get(this)},run:function(e){var t,n=A.propHooks[this.prop];return this.options.duration?this.pos=t=G.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):A.propHooks._default.set(this),this}}).init.prototype=A.prototype,(A.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=G.css(e.elem,e.prop,""))&&"auto"!==t?t:0:e.elem[e.prop]},set:function(e){G.fx.step[e.prop]?G.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[G.cssProps[e.prop]]||G.cssHooks[e.prop])?G.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}}).scrollTop=A.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},G.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},G.fx=A.prototype.init,G.fx.step={};var rt,ot,st=/^(?:toggle|show|hide)$/,at=new RegExp("^(?:([+-])=|)("+ye+")([a-z%]*)$","i"),lt=/queueHooks$/,ct=[function(e,t,n){var i,r,o,s,a,l,c,u=this,h={},d=e.style,p=e.nodeType&&we(e),f=G._data(e,"fxshow");n.queue||(null==(a=G._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,u.always(function(){u.always(function(){a.unqueued--,G.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],"inline"===("none"===(c=G.css(e,"display"))?G._data(e,"olddisplay")||T(e.nodeName):c)&&"none"===G.css(e,"float")&&(Z.inlineBlockNeedsLayout&&"inline"!==T(e.nodeName)?d.zoom=1:d.display="inline-block")),n.overflow&&(d.overflow="hidden",Z.shrinkWrapBlocks()||u.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(i in t)if(r=t[i],st.exec(r)){if(delete t[i],o=o||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!f||void 0===f[i])continue;p=!0}h[i]=f&&f[i]||G.style(e,i)}else c=void 0;if(G.isEmptyObject(h))"inline"===("none"===c?T(e.nodeName):c)&&(d.display=c);else{f?"hidden"in f&&(p=f.hidden):f=G._data(e,"fxshow",{}),o&&(f.hidden=!p),p?G(e).show():u.done(function(){G(e).hide()}),u.done(function(){var t;G._removeData(e,"fxshow");for(t in h)G.style(e,t,h[t])});for(i in h)s=H(p?f[i]:0,i,u),i in f||(f[i]=s.start,p&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}],ut={"*":[function(e,t){var n=this.createTween(e,t),i=n.cur(),r=at.exec(t),o=r&&r[3]||(G.cssNumber[e]?"":"px"),s=(G.cssNumber[e]||"px"!==o&&+i)&&at.exec(G.css(n.elem,e)),a=1,l=20;if(s&&s[3]!==o){o=o||s[3],r=r||[],s=+i||1;do{s/=a=a||".5",G.style(n.elem,e,s+o)}while(a!==(a=n.cur()/i)&&1!==a&&--l)}return r&&(s=n.start=+s||+i||0,n.unit=o,n.end=r[1]?s+(r[1]+1)*r[2]:+r[2]),n}]};G.Animation=G.extend(z,{tweener:function(e,t){G.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,i=0,r=e.length;i<r;i++)n=e[i],ut[n]=ut[n]||[],ut[n].unshift(t)},prefilter:function(e,t){t?ct.unshift(e):ct.push(e)}}),G.speed=function(e,t,n){var i=e&&"object"==typeof e?G.extend({},e):{complete:n||!n&&t||G.isFunction(e)&&e,duration:e,easing:n&&t||t&&!G.isFunction(t)&&t};return i.duration=G.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in G.fx.speeds?G.fx.speeds[i.duration]:G.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){G.isFunction(i.old)&&i.old.call(this),i.queue&&G.dequeue(this,i.queue)},i},G.fn.extend({fadeTo:function(e,t,n,i){return this.filter(we).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=G.isEmptyObject(e),o=G.speed(t,n,i),s=function(){var t=z(this,G.extend({},e),o);(r||G._data(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=G.timers,s=G._data(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&lt.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||G.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=G._data(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=G.timers,s=i?i.length:0;for(n.finish=!0,G.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),G.each(["toggle","show","hide"],function(e,t){var n=G.fn[t];G.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(L(t,!0),e,i,r)}}),G.each({slideDown:L("show"),slideUp:L("hide"),slideToggle:L("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){G.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),G.timers=[],G.fx.tick=function(){var e,t=G.timers,n=0;for(rt=G.now();n<t.length;n++)(e=t[n])()||t[n]!==e||t.splice(n--,1);t.length||G.fx.stop(),rt=void 0},G.fx.timer=function(e){G.timers.push(e),e()?G.fx.start():G.timers.pop()},G.fx.interval=13,G.fx.start=function(){ot||(ot=setInterval(G.fx.tick,G.fx.interval))},G.fx.stop=function(){clearInterval(ot),ot=null},G.fx.speeds={slow:600,fast:200,_default:400},G.fn.delay=function(e,t){return e=G.fx?G.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var i=setTimeout(t,e);n.stop=function(){clearTimeout(i)}})},function(){var e,t,n,i,r;(t=ae.createElement("div")).setAttribute("className","t"),t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=t.getElementsByTagName("a")[0],r=(n=ae.createElement("select")).appendChild(ae.createElement("option")),e=t.getElementsByTagName("input")[0],i.style.cssText="top:1px",Z.getSetAttribute="t"!==t.className,Z.style=/top/.test(i.getAttribute("style")),Z.hrefNormalized="/a"===i.getAttribute("href"),Z.checkOn=!!e.value,Z.optSelected=r.selected,Z.enctype=!!ae.createElement("form").enctype,n.disabled=!0,Z.optDisabled=!r.disabled,(e=ae.createElement("input")).setAttribute("value",""),Z.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),Z.radioValue="t"===e.value}();var ht=/\r/g;G.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=G.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,G(this).val()):e)?r="":"number"==typeof r?r+="":G.isArray(r)&&(r=G.map(r,function(e){return null==e?"":e+""})),(t=G.valHooks[this.type]||G.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return(t=G.valHooks[r.type]||G.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(ht,""):null==n?"":n}}}),G.extend({valHooks:{option:{get:function(e){var t=G.find.attr(e,"value");return null!=t?t:G.trim(G.text(e))}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,o="select-one"===e.type||r<0,s=o?null:[],a=o?r+1:i.length,l=r<0?a:o?r:0;l<a;l++)if(((n=i[l]).selected||l===r)&&(Z.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!G.nodeName(n.parentNode,"optgroup"))){if(t=G(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=G.makeArray(t),s=r.length;s--;)if(i=r[s],G.inArray(G.valHooks.option.get(i),o)>=0)try{i.selected=n=!0}catch(e){i.scrollHeight}else i.selected=!1;return n||(e.selectedIndex=-1),r}}}}),G.each(["radio","checkbox"],function(){G.valHooks[this]={set:function(e,t){if(G.isArray(t))return e.checked=G.inArray(G(e).val(),t)>=0}},Z.checkOn||(G.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var dt,pt,ft=G.expr.attrHandle,gt=/^(?:checked|selected)$/i,mt=Z.getSetAttribute,vt=Z.input;G.fn.extend({attr:function(e,t){return be(this,G.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){G.removeAttr(this,e)})}}),G.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===ge?G.prop(e,t,n):(1===o&&G.isXMLDoc(e)||(t=t.toLowerCase(),i=G.attrHooks[t]||(G.expr.match.bool.test(t)?pt:dt)),void 0===n?i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=G.find.attr(e,t))?void 0:r:null!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):void G.removeAttr(e,t))},removeAttr:function(e,t){var n,i,r=0,o=t&&t.match(he);if(o&&1===e.nodeType)for(;n=o[r++];)i=G.propFix[n]||n,G.expr.match.bool.test(n)?vt&&mt||!gt.test(n)?e[i]=!1:e[G.camelCase("default-"+n)]=e[i]=!1:G.attr(e,n,""),e.removeAttribute(mt?n:i)},attrHooks:{type:{set:function(e,t){if(!Z.radioValue&&"radio"===t&&G.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),pt={set:function(e,t,n){return!1===t?G.removeAttr(e,n):vt&&mt||!gt.test(n)?e.setAttribute(!mt&&G.propFix[n]||n,n):e[G.camelCase("default-"+n)]=e[n]=!0,n}},G.each(G.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ft[t]||G.find.attr;ft[t]=vt&&mt||!gt.test(t)?function(e,t,i){var r,o;return i||(o=ft[t],ft[t]=r,r=null!=n(e,t,i)?t.toLowerCase():null,ft[t]=o),r}:function(e,t,n){if(!n)return e[G.camelCase("default-"+t)]?t.toLowerCase():null}}),vt&&mt||(G.attrHooks.value={set:function(e,t,n){if(!G.nodeName(e,"input"))return dt&&dt.set(e,t,n);e.defaultValue=t}}),mt||(dt={set:function(e,t,n){var i=e.getAttributeNode(n);if(i||e.setAttributeNode(i=e.ownerDocument.createAttribute(n)),i.value=t+="","value"===n||t===e.getAttribute(n))return t}},ft.id=ft.name=ft.coords=function(e,t,n){var i;if(!n)return(i=e.getAttributeNode(t))&&""!==i.value?i.value:null},G.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified)return n.value},set:dt.set},G.attrHooks.contenteditable={set:function(e,t,n){dt.set(e,""!==t&&t,n)}},G.each(["width","height"],function(e,t){G.attrHooks[t]={set:function(e,n){if(""===n)return e.setAttribute(t,"auto"),n}}})),Z.style||(G.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var yt=/^(?:input|select|textarea|button|object)$/i,xt=/^(?:a|area)$/i;G.fn.extend({prop:function(e,t){return be(this,G.prop,e,t,arguments.length>1)},removeProp:function(e){return e=G.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),G.extend({propFix:{for:"htmlFor",class:"className"},prop:function(e,t,n){var i,r,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return(1!==o||!G.isXMLDoc(e))&&(t=G.propFix[t]||t,r=G.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=G.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}}}),Z.hrefNormalized||G.each(["href","src"],function(e,t){G.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),Z.optSelected||(G.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),G.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){G.propFix[this.toLowerCase()]=this}),Z.enctype||(G.propFix.enctype="encoding");var wt=/[\t\r\n\f]/g;G.fn.extend({addClass:function(e){var t,n,i,r,o,s,a=0,l=this.length,c="string"==typeof e&&e;if(G.isFunction(e))return this.each(function(t){G(this).addClass(e.call(this,t,this.className))});if(c)for(t=(e||"").match(he)||[];a<l;a++)if(n=this[a],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(wt," "):" ")){for(o=0;r=t[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");s=G.trim(i),n.className!==s&&(n.className=s)}return this},removeClass:function(e){var t,n,i,r,o,s,a=0,l=this.length,c=0===arguments.length||"string"==typeof e&&e;if(G.isFunction(e))return this.each(function(t){G(this).removeClass(e.call(this,t,this.className))});if(c)for(t=(e||"").match(he)||[];a<l;a++)if(n=this[a],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(wt," "):"")){for(o=0;r=t[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");s=e?G.trim(i):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):G.isFunction(e)?this.each(function(n){G(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n)for(var t,i=0,r=G(this),o=e.match(he)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else n!==ge&&"boolean"!==n||(this.className&&G._data(this,"__className__",this.className),this.className=this.className||!1===e?"":G._data(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,i=this.length;n<i;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(wt," ").indexOf(t)>=0)return!0;return!1}}),G.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){G.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),G.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var bt=G.now(),_t=/\?/,Ct=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;G.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,i=null,r=G.trim(t+"");return r&&!G.trim(r.replace(Ct,function(e,t,r,o){return n&&t&&(i=0),0===i?e:(n=r||t,i+=!o-!r,"")}))?Function("return "+r)():G.error("Invalid JSON: "+t)},G.parseXML=function(t){var n,i;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(i=new DOMParser,n=i.parseFromString(t,"text/xml")):((n=new ActiveXObject("Microsoft.XMLDOM")).async="false",n.loadXML(t))}catch(e){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||G.error("Invalid XML: "+t),n};var Tt,Et,Nt=/#.*$/,kt=/([?&])_=[^&]*/,St=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Dt=/^(?:GET|HEAD)$/,jt=/^\/\//,At=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,$t={},Lt={},Ht="*/".concat("*");try{Et=location.href}catch(e){(Et=ae.createElement("a")).href="",Et=Et.href}Tt=At.exec(Et.toLowerCase())||[],G.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Tt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":G.parseJSON,"text xml":G.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?O(O(e,G.ajaxSettings),t):O(G.ajaxSettings,e)},ajaxPrefilter:M($t),ajaxTransport:M(Lt),ajax:function(e,t){function n(e,t,n,i){var r,u,v,y,w,_=t;2!==x&&(x=2,a&&clearTimeout(a),c=void 0,s=i||"",b.readyState=e>0?4:0,r=e>=200&&e<300||304===e,n&&(y=function(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(s in a)if(a[s]&&a[s].test(r)){l.unshift(s);break}if(l[0]in n)o=l[0];else{for(s in n){if(!l[0]||e.converters[s+" "+l[0]]){o=s;break}i||(i=s)}o=o||i}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,b,n)),y=function(e,t,n,i){var r,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,y,b,r),r?(h.ifModified&&((w=b.getResponseHeader("Last-Modified"))&&(G.lastModified[o]=w),(w=b.getResponseHeader("etag"))&&(G.etag[o]=w)),204===e||"HEAD"===h.type?_="nocontent":304===e?_="notmodified":(_=y.state,u=y.data,r=!(v=y.error))):(v=_,!e&&_||(_="error",e<0&&(e=0))),b.status=e,b.statusText=(t||_)+"",r?f.resolveWith(d,[u,_,b]):f.rejectWith(d,[b,_,v]),b.statusCode(m),m=void 0,l&&p.trigger(r?"ajaxSuccess":"ajaxError",[b,h,r?u:v]),g.fireWith(d,[b,_]),l&&(p.trigger("ajaxComplete",[b,h]),--G.active||G.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,s,a,l,c,u,h=G.ajaxSetup({},t),d=h.context||h,p=h.context&&(d.nodeType||d.jquery)?G(d):G.event,f=G.Deferred(),g=G.Callbacks("once memory"),m=h.statusCode||{},v={},y={},x=0,w="canceled",b={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!u)for(u={};t=St.exec(s);)u[t[1].toLowerCase()]=t[2];t=u[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=y[n]=y[n]||e,v[e]=t),this},overrideMimeType:function(e){return x||(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)m[t]=[m[t],e[t]];else b.always(e[b.status]);return this},abort:function(e){var t=e||w;return c&&c.abort(t),n(0,t),this}};if(f.promise(b).complete=g.add,b.success=b.done,b.error=b.fail,h.url=((e||h.url||Et)+"").replace(Nt,"").replace(jt,Tt[1]+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=G.trim(h.dataType||"*").toLowerCase().match(he)||[""],null==h.crossDomain&&(i=At.exec(h.url.toLowerCase()),h.crossDomain=!(!i||i[1]===Tt[1]&&i[2]===Tt[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(Tt[3]||("http:"===Tt[1]?"80":"443")))),h.data&&h.processData&&"string"!=typeof h.data&&(h.data=G.param(h.data,h.traditional)),q($t,h,t,b),2===x)return b;(l=G.event&&h.global)&&0==G.active++&&G.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Dt.test(h.type),o=h.url,h.hasContent||(h.data&&(o=h.url+=(_t.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(h.url=kt.test(o)?o.replace(kt,"$1_="+bt++):o+(_t.test(o)?"&":"?")+"_="+bt++)),h.ifModified&&(G.lastModified[o]&&b.setRequestHeader("If-Modified-Since",G.lastModified[o]),G.etag[o]&&b.setRequestHeader("If-None-Match",G.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&b.setRequestHeader("Content-Type",h.contentType),b.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ht+"; q=0.01":""):h.accepts["*"]);for(r in h.headers)b.setRequestHeader(r,h.headers[r]);if(h.beforeSend&&(!1===h.beforeSend.call(d,b,h)||2===x))return b.abort();w="abort";for(r in{success:1,error:1,complete:1})b[r](h[r]);if(c=q(Lt,h,t,b)){b.readyState=1,l&&p.trigger("ajaxSend",[b,h]),h.async&&h.timeout>0&&(a=setTimeout(function(){b.abort("timeout")},h.timeout));try{x=1,c.send(v,n)}catch(e){if(!(x<2))throw e;n(-1,e)}}else n(-1,"No Transport");return b},getJSON:function(e,t,n){return G.get(e,t,n,"json")},getScript:function(e,t){return G.get(e,void 0,t,"script")}}),G.each(["get","post"],function(e,t){G[t]=function(e,n,i,r){return G.isFunction(n)&&(r=r||i,i=n,n=void 0),G.ajax({url:e,type:t,dataType:r,data:n,success:i})}}),G._evalUrl=function(e){return G.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},G.fn.extend({wrapAll:function(e){if(G.isFunction(e))return this.each(function(t){G(this).wrapAll(e.call(this,t))});if(this[0]){var t=G(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return G.isFunction(e)?this.each(function(t){G(this).wrapInner(e.call(this,t))}):this.each(function(){var t=G(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=G.isFunction(e);return this.each(function(n){G(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){G.nodeName(this,"body")||G(this).replaceWith(this.childNodes)}).end()}}),G.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!Z.reliableHiddenOffsets()&&"none"===(e.style&&e.style.display||G.css(e,"display"))},G.expr.filters.visible=function(e){return!G.expr.filters.hidden(e)};var zt=/%20/g,Mt=/\[\]$/,qt=/\r?\n/g,Ot=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;G.param=function(e,t){var n,i=[],r=function(e,t){t=G.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=G.ajaxSettings&&G.ajaxSettings.traditional),G.isArray(e)||e.jquery&&!G.isPlainObject(e))G.each(e,function(){r(this.name,this.value)});else for(n in e)P(n,e[n],t,r);return i.join("&").replace(zt,"+")},G.fn.extend({serialize:function(){return G.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=G.prop(this,"elements");return e?G.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!G(this).is(":disabled")&&Pt.test(this.nodeName)&&!Ot.test(e)&&(this.checked||!_e.test(e))}).map(function(e,t){var n=G(this).val();return null==n?null:G.isArray(n)?G.map(n,function(e){return{name:t.name,value:e.replace(qt,"\r\n")}}):{name:t.name,value:n.replace(qt,"\r\n")}}).get()}}),G.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&F()||function(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}()}:F;var Ft=0,Wt={},Rt=G.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Wt)Wt[e](void 0,!0)}),Z.cors=!!Rt&&"withCredentials"in Rt,(Rt=Z.ajax=!!Rt)&&G.ajaxTransport(function(e){if(!e.crossDomain||Z.cors){var t;return{send:function(n,i){var r,o=e.xhr(),s=++Ft;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)o[r]=e.xhrFields[r];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)void 0!==n[r]&&o.setRequestHeader(r,n[r]+"");o.send(e.hasContent&&e.data||null),t=function(n,r){var a,l,c;if(t&&(r||4===o.readyState))if(delete Wt[s],t=void 0,o.onreadystatechange=G.noop,r)4!==o.readyState&&o.abort();else{c={},a=o.status,"string"==typeof o.responseText&&(c.text=o.responseText);try{l=o.statusText}catch(e){l=""}a||!e.isLocal||e.crossDomain?1223===a&&(a=204):a=c.text?200:404}c&&i(a,l,c,o.getAllResponseHeaders())},e.async?4===o.readyState?setTimeout(t):o.onreadystatechange=Wt[s]=t:t()},abort:function(){t&&t(void 0,!0)}}}}),G.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return G.globalEval(e),e}}}),G.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),G.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=ae.head||G("head")[0]||ae.documentElement;return{send:function(i,r){(t=ae.createElement("script")).async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||r(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var Bt=[],It=/(=)\?(?=&|$)|\?\?/;G.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Bt.pop()||G.expando+"_"+bt++;return this[e]=!0,e}}),G.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,s,a=!1!==t.jsonp&&(It.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&It.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=G.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(It,"$1"+r):!1!==t.jsonp&&(t.url+=(_t.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||G.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){s=arguments},i.always(function(){e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,Bt.push(r)),s&&G.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),G.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||ae;var i=re.exec(e),r=!n&&[];return i?[t.createElement(i[1])]:(i=G.buildFragment([e],t,r),r&&r.length&&G(r).remove(),G.merge([],i.childNodes))};var Xt=G.fn.load;G.fn.load=function(e,t,n){if("string"!=typeof e&&Xt)return Xt.apply(this,arguments);var i,r,o,s=this,a=e.indexOf(" ");return a>=0&&(i=G.trim(e.slice(a,e.length)),e=e.slice(0,a)),G.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&G.ajax({url:e,type:o,dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?G("<div>").append(G.parseHTML(e)).find(i):e)}).complete(n&&function(e,t){s.each(n,r||[e.responseText,t,e])}),this},G.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){G.fn[t]=function(e){return this.on(t,e)}}),G.expr.filters.animated=function(e){return G.grep(G.timers,function(t){return e===t.elem}).length};var Ut=e.document.documentElement;G.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,c=G.css(e,"position"),u=G(e),h={};"static"===c&&(e.style.position="relative"),a=u.offset(),o=G.css(e,"top"),l=G.css(e,"left"),("absolute"===c||"fixed"===c)&&G.inArray("auto",[o,l])>-1?(s=(i=u.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),G.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(h.top=t.top-a.top+s),null!=t.left&&(h.left=t.left-a.left+r),"using"in t?t.using.call(e,h):u.css(h)}},G.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){G.offset.setOffset(this,e,t)});var t,n,i={top:0,left:0},r=this[0],o=r&&r.ownerDocument;if(o)return t=o.documentElement,G.contains(t,r)?(typeof r.getBoundingClientRect!==ge&&(i=r.getBoundingClientRect()),n=W(o),{top:i.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:i.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):i},position:function(){if(this[0]){var e,t,n={top:0,left:0},i=this[0];return"fixed"===G.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),G.nodeName(e[0],"html")||(n=e.offset()),n.top+=G.css(e[0],"borderTopWidth",!0),n.left+=G.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-G.css(i,"marginTop",!0),left:t.left-n.left-G.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||Ut;e&&!G.nodeName(e,"html")&&"static"===G.css(e,"position");)e=e.offsetParent;return e||Ut})}}),G.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);G.fn[e]=function(i){return be(this,function(e,i,r){var o=W(e);if(void 0===r)return o?t in o?o[t]:o.document.documentElement[i]:e[i];o?o.scrollTo(n?G(o).scrollLeft():r,n?r:G(o).scrollTop()):e[i]=r},e,i,arguments.length,null)}}),G.each(["top","left"],function(e,t){G.cssHooks[t]=E(Z.pixelPosition,function(e,n){if(n)return n=Ue(e,t),Qe.test(n)?G(e).position()[t]+"px":n})}),G.each({Height:"height",Width:"width"},function(e,t){G.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){G.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===r?"margin":"border");return be(this,function(t,n,i){var r;return G.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?G.css(t,n,s):G.style(t,n,i,s)},t,o?i:void 0,o,null)}})}),G.fn.size=function(){return this.length},G.fn.andSelf=G.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return G});var Vt=e.jQuery,Qt=e.$;return G.noConflict=function(t){return e.$===G&&(e.$=Qt),t&&e.jQuery===G&&(e.jQuery=Vt),G},typeof t===ge&&(e.jQuery=e.$=G),G}),window.tajam={},function(e,t,n,i){function r(t,n){this.settings=null,this.options=e.extend({},r.Defaults,n),this.$element=e(t),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},e.each(["onResize","onThrottledResize"],e.proxy(function(t,n){this._handlers[n]=e.proxy(this[n],this)},this)),e.each(r.Plugins,e.proxy(function(e,t){this._plugins[e.charAt(0).toLowerCase()+e.slice(1)]=new t(this)},this)),e.each(r.Workers,e.proxy(function(t,n){this._pipe.push({filter:n.filter,run:e.proxy(n.run,this)})},this)),this.setup(),this.initialize()}r.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:t,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},r.Width={Default:"default",Inner:"inner",Outer:"outer"},r.Type={Event:"event",State:"state"},r.Plugins={},r.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(e){e.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(e){var t=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,r={width:"auto","margin-left":i?t:"","margin-right":i?"":t};!n&&this.$stage.children().css(r),e.css=r}},{filter:["width","items","settings"],run:function(e){var t=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,r=!this.settings.autoWidth,o=[];for(e.items={merge:!1,width:t};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,e.items.merge=n>1||e.items.merge,o[i]=r?t*n:this._items[i].width();this._widths=o}},{filter:["items","settings"],run:function(){var t=[],n=this._items,i=this.settings,r=Math.max(2*i.items,4),o=2*Math.ceil(n.length/2),s=i.loop&&n.length?i.rewind?r:Math.max(r,o):0,a="",l="";for(s/=2;s--;)t.push(this.normalize(t.length/2,!0)),a+=n[t[t.length-1]][0].outerHTML,t.push(this.normalize(n.length-1-(t.length-1)/2,!0)),l=n[t[t.length-1]][0].outerHTML+l;this._clones=t,e(a).addClass("cloned").appendTo(this.$stage),e(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var e=this.settings.rtl?1:-1,t=this._clones.length+this._items.length,n=-1,i=0,r=0,o=[];++n<t;)i=o[n-1]||0,r=this._widths[this.relative(n)]+this.settings.margin,o.push(i+r*e);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var e=this.settings.stagePadding,t=this._coordinates,n={width:Math.ceil(Math.abs(t[t.length-1]))+2*e,"padding-left":e||"","padding-right":e||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(e){var t=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&e.items.merge)for(;t--;)e.css.width=this._widths[this.relative(t)],i.eq(t).css(e.css);else n&&(e.css.width=e.items.width,i.css(e.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(e){e.current=e.current?this.$stage.children().index(e.current):0,e.current=Math.max(this.minimum(),Math.min(this.maximum(),e.current)),this.reset(e.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var e,t,n,i,r=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,s=this.coordinates(this.current())+o,a=s+this.width()*r,l=[];for(n=0,i=this._coordinates.length;n<i;n++)e=this._coordinates[n-1]||0,t=Math.abs(this._coordinates[n])+o*r,(this.op(e,"<=",s)&&this.op(e,">",a)||this.op(t,"<",s)&&this.op(t,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],r.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var t,n,r;t=this.$element.find("img"),n=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:i,r=this.$element.children(n).width(),t.length&&r<=0&&this.preloadAutoWidthImages(t)}this.$element.addClass(this.options.loadingClass),this.$stage=e("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},r.prototype.setup=function(){var t=this.viewport(),n=this.options.responsive,i=-1,r=null;n?(e.each(n,function(e){e<=t&&e>i&&(i=Number(e))}),"function"==typeof(r=e.extend({},this.options,n[i])).stagePadding&&(r.stagePadding=r.stagePadding()),delete r.responsive,r.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+i))):r=e.extend({},this.options),this.trigger("change",{property:{name:"settings",value:r}}),this._breakpoint=i,this.settings=r,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},r.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},r.prototype.prepare=function(t){var n=this.trigger("prepare",{content:t});return n.data||(n.data=e("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(t)),this.trigger("prepared",{content:n.data}),n.data},r.prototype.update=function(){for(var t=0,n=this._pipe.length,i=e.proxy(function(e){return this[e]},this._invalidated),r={};t<n;)(this._invalidated.all||e.grep(this._pipe[t].filter,i).length>0)&&this._pipe[t].run(r),t++;this._invalidated={},!this.is("valid")&&this.enter("valid")},r.prototype.width=function(e){switch(e=e||r.Width.Default){case r.Width.Inner:case r.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},r.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},r.prototype.onThrottledResize=function(){t.clearTimeout(this.resizeTimer),this.resizeTimer=t.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},r.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},r.prototype.registerEventHandlers=function(){e.support.transition&&this.$stage.on(e.support.transition.end+".owl.core",e.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(t,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",e.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",e.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",e.proxy(this.onDragEnd,this)))},r.prototype.onDragStart=function(t){var i=null;3!==t.which&&(e.support.transform?i={x:(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===i.length?12:4],y:i[16===i.length?13:5]}:(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(e.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===t.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=e(t.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(t),e(n).on("mouseup.owl.core touchend.owl.core",e.proxy(this.onDragEnd,this)),e(n).one("mousemove.owl.core touchmove.owl.core",e.proxy(function(t){var i=this.difference(this._drag.pointer,this.pointer(t));e(n).on("mousemove.owl.core touchmove.owl.core",e.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(t.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},r.prototype.onDragMove=function(e){var t=null,n=null,i=null,r=this.difference(this._drag.pointer,this.pointer(e)),o=this.difference(this._drag.stage.start,r);this.is("dragging")&&(e.preventDefault(),this.settings.loop?(t=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-t,o.x=((o.x-t)%n+n)%n+t):(t=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*r.x/5:0,o.x=Math.max(Math.min(o.x,t+i),n+i)),this._drag.stage.current=o,this.animate(o.x))},r.prototype.onDragEnd=function(t){var i=this.difference(this._drag.pointer,this.pointer(t)),r=this._drag.stage.current,o=i.x>0^this.settings.rtl?"left":"right";e(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(r.x,0!==i.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},r.prototype.closest=function(t,n){var i=-1,r=this.width(),o=this.coordinates();return this.settings.freeDrag||e.each(o,e.proxy(function(e,s){return"left"===n&&t>s-30&&t<s+30?i=e:"right"===n&&t>s-r-30&&t<s-r+30?i=e+1:this.op(t,"<",s)&&this.op(t,">",o[e+1]||s-r)&&(i="left"===n?e+1:e),-1===i},this)),this.settings.loop||(this.op(t,">",o[this.minimum()])?i=t=this.minimum():this.op(t,"<",o[this.maximum()])&&(i=t=this.maximum())),i},r.prototype.animate=function(t){var n=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),n&&(this.enter("animating"),this.trigger("translate")),e.support.transform3d&&e.support.transition?this.$stage.css({transform:"translate3d("+t+"px,0px,0px)",transition:this.speed()/1e3+"s"}):n?this.$stage.animate({left:t+"px"},this.speed(),this.settings.fallbackEasing,e.proxy(this.onTransitionEnd,this)):this.$stage.css({left:t+"px"})},r.prototype.is=function(e){return this._states.current[e]&&this._states.current[e]>0},r.prototype.current=function(e){if(e===i)return this._current;if(0===this._items.length)return i;if(e=this.normalize(e),this._current!==e){var t=this.trigger("change",{property:{name:"position",value:e}});t.data!==i&&(e=this.normalize(t.data)),this._current=e,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},r.prototype.invalidate=function(t){return"string"===e.type(t)&&(this._invalidated[t]=!0,this.is("valid")&&this.leave("valid")),e.map(this._invalidated,function(e,t){return t})},r.prototype.reset=function(e){(e=this.normalize(e))!==i&&(this._speed=0,this._current=e,this.suppress(["translate","translated"]),this.animate(this.coordinates(e)),this.release(["translate","translated"]))},r.prototype.normalize=function(e,t){var n=this._items.length,r=t?0:this._clones.length;return!this.isNumeric(e)||n<1?e=i:(e<0||e>=n+r)&&(e=((e-r/2)%n+n)%n+r/2),e},r.prototype.relative=function(e){return e-=this._clones.length/2,this.normalize(e,!0)},r.prototype.maximum=function(e){var t,n,i,r=this.settings,o=this._coordinates.length;if(r.loop)o=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){for(t=this._items.length,n=this._items[--t].width(),i=this.$element.width();t--&&!((n+=this._items[t].width()+this.settings.margin)>i););o=t+1}else o=r.center?this._items.length-1:this._items.length-r.items;return e&&(o-=this._clones.length/2),Math.max(o,0)},r.prototype.minimum=function(e){return e?0:this._clones.length/2},r.prototype.items=function(e){return e===i?this._items.slice():(e=this.normalize(e,!0),this._items[e])},r.prototype.mergers=function(e){return e===i?this._mergers.slice():(e=this.normalize(e,!0),this._mergers[e])},r.prototype.clones=function(t){var n=this._clones.length/2,r=n+this._items.length,o=function(e){return e%2==0?r+e/2:n-(e+1)/2};return t===i?e.map(this._clones,function(e,t){return o(t)}):e.map(this._clones,function(e,n){return e===t?o(n):null})},r.prototype.speed=function(e){return e!==i&&(this._speed=e),this._speed},r.prototype.coordinates=function(t){var n,r=1,o=t-1;return t===i?e.map(this._coordinates,e.proxy(function(e,t){return this.coordinates(t)},this)):(this.settings.center?(this.settings.rtl&&(r=-1,o=t+1),n=this._coordinates[t],n+=(this.width()-n+(this._coordinates[o]||0))/2*r):n=this._coordinates[o]||0,n=Math.ceil(n))},r.prototype.duration=function(e,t,n){return 0===n?0:Math.min(Math.max(Math.abs(t-e),1),6)*Math.abs(n||this.settings.smartSpeed)},r.prototype.to=function(e,t){var n=this.current(),i=null,r=e-this.relative(n),o=(r>0)-(r<0),s=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>s/2&&(r+=-1*o*s),(i=(((e=n+r)-a)%s+s)%s+a)!==e&&i-r<=l&&i-r>0&&(n=i-r,e=i,this.reset(n))):e=this.settings.rewind?(e%(l+=1)+l)%l:Math.max(a,Math.min(l,e)),this.speed(this.duration(n,e,t)),this.current(e),this.$element.is(":visible")&&this.update()},r.prototype.next=function(e){e=e||!1,this.to(this.relative(this.current())+1,e)},r.prototype.prev=function(e){e=e||!1,this.to(this.relative(this.current())-1,e)},r.prototype.onTransitionEnd=function(e){if(e!==i&&(e.stopPropagation(),(e.target||e.srcElement||e.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},r.prototype.viewport=function(){var i;return this.options.responsiveBaseElement!==t?i=e(this.options.responsiveBaseElement).width():t.innerWidth?i=t.innerWidth:n.documentElement&&n.documentElement.clientWidth?i=n.documentElement.clientWidth:console.warn("Can not detect viewport width."),i},r.prototype.replace=function(t){this.$stage.empty(),this._items=[],t&&(t=t instanceof jQuery?t:e(t)),this.settings.nestedItemSelector&&(t=t.find("."+this.settings.nestedItemSelector)),t.filter(function(){return 1===this.nodeType}).each(e.proxy(function(e,t){t=this.prepare(t),this.$stage.append(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},r.prototype.add=function(t,n){var r=this.relative(this._current);n=n===i?this._items.length:this.normalize(n,!0),t=t instanceof jQuery?t:e(t),this.trigger("add",{content:t,position:n}),t=this.prepare(t),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(t),0!==this._items.length&&this._items[n-1].after(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(t),this._items.splice(n,0,t),this._mergers.splice(n,0,1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[r]&&this.reset(this._items[r].index()),this.invalidate("items"),this.trigger("added",{content:t,position:n})},r.prototype.remove=function(e){(e=this.normalize(e,!0))!==i&&(this.trigger("remove",{content:this._items[e],position:e}),this._items[e].remove(),this._items.splice(e,1),this._mergers.splice(e,1),this.invalidate("items"),this.trigger("removed",{content:null,position:e}))},r.prototype.preloadAutoWidthImages=function(t){t.each(e.proxy(function(t,n){this.enter("pre-loading"),n=e(n),e(new Image).one("load",e.proxy(function(e){n.attr("src",e.target.src),n.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",n.attr("src")||n.attr("data-src")||n.attr("data-src-retina"))},this))},r.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),e(n).off(".owl.core"),!1!==this.settings.responsive&&(t.clearTimeout(this.resizeTimer),this.off(t,"resize",this._handlers.onThrottledResize));for(var i in this._plugins)this._plugins[i].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},r.prototype.op=function(e,t,n){var i=this.settings.rtl;switch(t){case"<":return i?e>n:e<n;case">":return i?e<n:e>n;case">=":return i?e<=n:e>=n;case"<=":return i?e>=n:e<=n}},r.prototype.on=function(e,t,n,i){e.addEventListener?e.addEventListener(t,n,i):e.attachEvent&&e.attachEvent("on"+t,n)},r.prototype.off=function(e,t,n,i){e.removeEventListener?e.removeEventListener(t,n,i):e.detachEvent&&e.detachEvent("on"+t,n)},r.prototype.trigger=function(t,n,i,o,s){var a={item:{count:this._items.length,index:this.current()}},l=e.camelCase(e.grep(["on",t,i],function(e){return e}).join("-").toLowerCase()),c=e.Event([t,"owl",i||"carousel"].join(".").toLowerCase(),e.extend({relatedTarget:this},a,n));return this._supress[t]||(e.each(this._plugins,function(e,t){t.onTrigger&&t.onTrigger(c)}),this.register({type:r.Type.Event,name:t}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},r.prototype.enter=function(t){e.each([t].concat(this._states.tags[t]||[]),e.proxy(function(e,t){this._states.current[t]===i&&(this._states.current[t]=0),this._states.current[t]++},this))},r.prototype.leave=function(t){e.each([t].concat(this._states.tags[t]||[]),e.proxy(function(e,t){this._states.current[t]--},this))},r.prototype.register=function(t){if(t.type===r.Type.Event){if(e.event.special[t.name]||(e.event.special[t.name]={}),!e.event.special[t.name].owl){var n=e.event.special[t.name]._default;e.event.special[t.name]._default=function(e){return!n||!n.apply||e.namespace&&-1!==e.namespace.indexOf("owl")?e.namespace&&e.namespace.indexOf("owl")>-1:n.apply(this,arguments)},e.event.special[t.name].owl=!0}}else t.type===r.Type.State&&(this._states.tags[t.name]?this._states.tags[t.name]=this._states.tags[t.name].concat(t.tags):this._states.tags[t.name]=t.tags,this._states.tags[t.name]=e.grep(this._states.tags[t.name],e.proxy(function(n,i){return e.inArray(n,this._states.tags[t.name])===i},this)))},r.prototype.suppress=function(t){e.each(t,e.proxy(function(e,t){this._supress[t]=!0},this))},r.prototype.release=function(t){e.each(t,e.proxy(function(e,t){delete this._supress[t]},this))},r.prototype.pointer=function(e){var n={x:null,y:null};return e=e.originalEvent||e||t.event,(e=e.touches&&e.touches.length?e.touches[0]:e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e).pageX?(n.x=e.pageX,n.y=e.pageY):(n.x=e.clientX,n.y=e.clientY),n},r.prototype.isNumeric=function(e){return!isNaN(parseFloat(e))},r.prototype.difference=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},e.fn.owlCarousel=function(t){var n=Array.prototype.slice.call(arguments,1);return this.each(function(){var i=e(this),o=i.data("owl.carousel");o||(o=new r(this,"object"==typeof t&&t),i.data("owl.carousel",o),e.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(t,n){o.register({type:r.Type.Event,name:n}),o.$element.on(n+".owl.carousel.core",e.proxy(function(e){e.namespace&&e.relatedTarget!==this&&(this.suppress([n]),o[n].apply(this,[].slice.call(arguments,1)),this.release([n]))},o))})),"string"==typeof t&&"_"!==t.charAt(0)&&o[t].apply(o,n)})},e.fn.owlCarousel.Constructor=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=t.setInterval(e.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var e,n;t.clearInterval(this._interval);for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},e.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":e.proxy(function(t){if(t.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(t.property&&"position"==t.property.name||"initialized"==t.type))for(var n=this._core.settings,i=n.center&&Math.ceil(n.items/2)||n.items,r=n.center&&-1*i||0,o=(t.property&&void 0!==t.property.value?t.property.value:this._core.current())+r,s=this._core.clones().length,a=e.proxy(function(e,t){this.load(t)},this);r++<i;)this.load(s/2+this._core.relative(o)),s&&e.each(this._core.clones(this._core.relative(o)),a),o++},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={lazyLoad:!1},r.prototype.load=function(n){var i=this._core.$stage.children().eq(n),r=i&&i.find(".owl-lazy");!r||e.inArray(i.get(0),this._loaded)>-1||(r.each(e.proxy(function(n,i){var r,o=e(i),s=t.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src");this._core.trigger("load",{element:o,url:s},"lazy"),o.is("img")?o.one("load.owl.lazy",e.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:s},"lazy")},this)).attr("src",s):((r=new Image).onload=e.proxy(function(){o.css({"background-image":'url("'+s+'")',opacity:"1"}),this._core.trigger("loaded",{element:o,url:s},"lazy")},this),r.src=s)},this)),this._loaded.push(i.get(0)))},r.prototype.destroy=function(){var e,t;for(e in this.handlers)this._core.$element.off(e,this.handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.Lazy=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoHeight&&"position"==e.property.name&&this.update()},this),"loaded.owl.lazy":e.proxy(function(e){e.namespace&&this._core.settings.autoHeight&&e.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},r.prototype.update=function(){var t=this._core._current,n=t+this._core.settings.items,i=this._core.$stage.children().toArray().slice(t,n),r=[],o=0;e.each(i,function(t,n){r.push(e(n).height())}),o=Math.max.apply(null,r),this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},r.prototype.destroy=function(){var e,t;for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.AutoHeight=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":e.proxy(function(e){e.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.video&&this.isInFullScreen()&&e.preventDefault()},this),"refreshed.owl.carousel":e.proxy(function(e){e.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":e.proxy(function(e){e.namespace&&"position"===e.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":e.proxy(function(t){if(t.namespace){var n=e(t.content).find(".owl-video");n.length&&(n.css("display","none"),this.fetch(n,e(t.content)))}},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",e.proxy(function(e){this.play(e)},this))};r.Defaults={video:!1,videoHeight:!1,videoWidth:!1},r.prototype.fetch=function(e,t){var n=e.attr("data-vimeo-id")?"vimeo":e.attr("data-vzaar-id")?"vzaar":"youtube",i=e.attr("data-vimeo-id")||e.attr("data-youtube-id")||e.attr("data-vzaar-id"),r=e.attr("data-width")||this._core.settings.videoWidth,o=e.attr("data-height")||this._core.settings.videoHeight,s=e.attr("href");if(!s)throw new Error("Missing video URL.");if((i=s.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu")>-1)n="youtube";else if(i[3].indexOf("vimeo")>-1)n="vimeo";else{if(!(i[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[s]={type:n,id:i,width:r,height:o},t.attr("data-video",s),this.thumbnail(e,this._videos[s])},r.prototype.thumbnail=function(t,n){var i,r,o,s=n.width&&n.height?'style="width:'+n.width+"px;height:"+n.height+'px;"':"",a=t.find("img"),l="src",c="",u=this._core.settings,h=function(e){r='<div class="owl-video-play-icon"></div>',i=u.lazyLoad?'<div class="owl-video-tn '+c+'" '+l+'="'+e+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+e+')"></div>',t.after(i),t.after(r)};if(t.wrap('<div class="owl-video-wrapper"'+s+"></div>"),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),a.length)return h(a.attr(l)),a.remove(),!1;"youtube"===n.type?(o="//img.youtube.com/vi/"+n.id+"/hqdefault.jpg",h(o)):"vimeo"===n.type?e.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(e){o=e[0].thumbnail_large,h(o)}}):"vzaar"===n.type&&e.ajax({type:"GET",url:"//vzaar.com/api/videos/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(e){o=e.framegrab_url,h(o)}})},r.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},r.prototype.play=function(t){var n,i=e(t.target).closest("."+this._core.settings.itemClass),r=this._videos[i.attr("data-video")],o=r.width||"100%",s=r.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),i=this._core.items(this._core.relative(i.index())),this._core.reset(i.index()),"youtube"===r.type?n='<iframe width="'+o+'" height="'+s+'" src="//www.youtube.com/embed/'+r.id+"?autoplay=1&rel=0&v="+r.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===r.type?n='<iframe src="//player.vimeo.com/video/'+r.id+'?autoplay=1" width="'+o+'" height="'+s+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===r.type&&(n='<iframe frameborder="0"height="'+s+'"width="'+o+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+r.id+'/player?autoplay=true"></iframe>'),e('<div class="owl-video-frame">'+n+"</div>").insertAfter(i.find(".owl-video")),this._playing=i.addClass("owl-video-playing"))},r.prototype.isInFullScreen=function(){var t=n.fullscreenElement||n.mozFullScreenElement||n.webkitFullscreenElement;return t&&e(t).parent().hasClass("owl-video-frame")},r.prototype.destroy=function(){var e,t;this._core.$element.off("click.owl.video");for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.Video=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this.core=t,this.core.options=e.extend({},r.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":e.proxy(function(e){e.namespace&&"position"==e.property.name&&(this.previous=this.core.current(),this.next=e.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":e.proxy(function(e){e.namespace&&(this.swapping="translated"==e.type)},this),"translate.owl.carousel":e.proxy(function(e){e.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};r.Defaults={animateOut:!1,animateIn:!1},r.prototype.swap=function(){if(1===this.core.settings.items&&e.support.animation&&e.support.transition){this.core.speed(0);var t,n=e.proxy(this.clear,this),i=this.core.$stage.children().eq(this.previous),r=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,s=this.core.settings.animateOut;this.core.current()!==this.previous&&(s&&(t=this.core.coordinates(this.previous)-this.core.coordinates(this.next),i.one(e.support.animation.end,n).css({left:t+"px"}).addClass("animated owl-animated-out").addClass(s)),o&&r.one(e.support.animation.end,n).addClass("animated owl-animated-in").addClass(o))}},r.prototype.clear=function(t){e(t.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},r.prototype.destroy=function(){var e,t;for(e in this.handlers)this.core.$element.off(e,this.handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.Animate=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":e.proxy(function(e){e.namespace&&"settings"===e.property.name?this._core.settings.autoplay?this.play():this.stop():e.namespace&&"position"===e.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":e.proxy(function(e,t,n){e.namespace&&this.play(t,n)},this),"stop.owl.autoplay":e.proxy(function(e){e.namespace&&this.stop()},this),"mouseover.owl.autoplay":e.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":e.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":e.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":e.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=e.extend({},r.Defaults,this._core.options)};r.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},r.prototype.play=function(e,t){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},r.prototype._getNextTimeout=function(i,r){return this._timeout&&t.clearTimeout(this._timeout),t.setTimeout(e.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||n.hidden||this._core.next(r||this._core.settings.autoplaySpeed)},this),i||this._core.settings.autoplayTimeout)},r.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},r.prototype.stop=function(){this._core.is("rotating")&&(t.clearTimeout(this._timeout),this._core.leave("rotating"))},r.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},r.prototype.destroy=function(){var e,t;this.stop();for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.autoplay=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){"use strict";var r=function(t){this._core=t,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":e.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+e(t.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.splice(e.position,0,this._templates.pop())},this),"remove.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.splice(e.position,1)},this),"changed.owl.carousel":e.proxy(function(e){e.namespace&&"position"==e.property.name&&this.draw()},this),"initialized.owl.carousel":e.proxy(function(e){e.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":e.proxy(function(e){e.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers)};r.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},r.prototype.initialize=function(){var t,n=this._core.settings;this._controls.$relative=(n.navContainer?e(n.navContainer):e("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=e("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",e.proxy(function(e){this.prev(n.navSpeed)},this)),this._controls.$next=e("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",e.proxy(function(e){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[e("<div>").addClass(n.dotClass).append(e("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?e(n.dotsContainer):e("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",e.proxy(function(t){var i=e(t.target).parent().is(this._controls.$absolute)?e(t.target).index():e(t.target).parent().index();t.preventDefault(),this.to(i,n.dotsSpeed)},this));for(t in this._overrides)this._core[t]=e.proxy(this[t],this)},r.prototype.destroy=function(){var e,t,n,i;for(e in this._handlers)this.$element.off(e,this._handlers[e]);for(t in this._controls)this._controls[t].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},r.prototype.update=function(){var e,t,n=this._core.clones().length/2,i=n+this._core.items().length,r=this._core.maximum(!0),o=this._core.settings,s=o.center||o.autoWidth||o.dotsData?1:o.dotsEach||o.items;if("page"!==o.slideBy&&(o.slideBy=Math.min(o.slideBy,o.items)),o.dots||"page"==o.slideBy)for(this._pages=[],e=n,t=0,0;e<i;e++){if(t>=s||0===t){if(this._pages.push({start:Math.min(r,e-n),end:e-n+s-1}),Math.min(r,e-n)===r)break;t=0,0}t+=this._core.mergers(this._core.relative(e))}},r.prototype.draw=function(){var t,n=this._core.settings,i=this._core.items().length<=n.items,r=this._core.relative(this._core.current()),o=n.loop||n.rewind;this._controls.$relative.toggleClass("disabled",!n.nav||i),n.nav&&(this._controls.$previous.toggleClass("disabled",!o&&r<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&r>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!n.dots||i),n.dots&&(t=this._pages.length-this._controls.$absolute.children().length,n.dotsData&&0!==t?this._controls.$absolute.html(this._templates.join("")):t>0?this._controls.$absolute.append(new Array(t+1).join(this._templates[0])):t<0&&this._controls.$absolute.children().slice(t).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(e.inArray(this.current(),this._pages)).addClass("active"))},r.prototype.onTrigger=function(t){var n=this._core.settings;t.page={index:e.inArray(this.current(),this._pages),count:this._pages.length,size:n&&(n.center||n.autoWidth||n.dotsData?1:n.dotsEach||n.items)}},r.prototype.current=function(){var t=this._core.relative(this._core.current());return e.grep(this._pages,e.proxy(function(e,n){return e.start<=t&&e.end>=t},this)).pop()},r.prototype.getPosition=function(t){var n,i,r=this._core.settings;return"page"==r.slideBy?(n=e.inArray(this.current(),this._pages),i=this._pages.length,t?++n:--n,n=this._pages[(n%i+i)%i].start):(n=this._core.relative(this._core.current()),i=this._core.items().length,t?n+=r.slideBy:n-=r.slideBy),n},r.prototype.next=function(t){e.proxy(this._overrides.to,this._core)(this.getPosition(!0),t)},r.prototype.prev=function(t){e.proxy(this._overrides.to,this._core)(this.getPosition(!1),t)},r.prototype.to=function(t,n,i){var r;!i&&this._pages.length?(r=this._pages.length,e.proxy(this._overrides.to,this._core)(this._pages[(t%r+r)%r].start,n)):e.proxy(this._overrides.to,this._core)(t,n)},e.fn.owlCarousel.Constructor.Plugins.Navigation=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){"use strict";var r=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":e.proxy(function(n){n.namespace&&"URLHash"===this._core.settings.startPosition&&e(t).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":e.proxy(function(t){if(t.namespace){var n=e(t.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!n)return;this._hashes[n]=t.content}},this),"changed.owl.carousel":e.proxy(function(n){if(n.namespace&&"position"===n.property.name){var i=this._core.items(this._core.relative(this._core.current())),r=e.map(this._hashes,function(e,t){return e===i?t:null}).join();if(!r||t.location.hash.slice(1)===r)return;t.location.hash=r}},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers),e(t).on("hashchange.owl.navigation",e.proxy(function(e){var n=t.location.hash.substring(1),i=this._core.$stage.children(),r=this._hashes[n]&&i.index(this._hashes[n]);void 0!==r&&r!==this._core.current()&&this._core.to(this._core.relative(r),!1,!0)},this))};r.Defaults={URLhashListener:!1},r.prototype.destroy=function(){var n,i;e(t).off("hashchange.owl.navigation");for(n in this._handlers)this._core.$element.off(n,this._handlers[n]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},e.fn.owlCarousel.Constructor.Plugins.Hash=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){function r(t,n){var r=!1,o=t.charAt(0).toUpperCase()+t.slice(1);return e.each((t+" "+a.join(o+" ")+o).split(" "),function(e,t){if(s[t]!==i)return r=!n||t,!1}),r}function o(e){return r(e,!0)}var s=e("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},c={end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}},u=function(){return!!r("transform")},h=function(){return!!r("perspective")},d=function(){return!!r("animation")};(function(){return!!r("transition")})()&&(e.support.transition=new String(o("transition")),e.support.transition.end=l.end[e.support.transition]),d()&&(e.support.animation=new String(o("animation")),e.support.animation.end=c.end[e.support.animation]),u()&&(e.support.transform=new String(o("transform")),e.support.transform3d=h())}(window.Zepto||window.jQuery,window,document),function(){var e={},t=document.querySelector(".header__toggle"),n=document.querySelector(".nav");e.collapseClickHandler=function(){t.classList.toggle("header__toggle--active"),n.classList.toggle("nav--active")},tajam.collapse=e}(),function(){var e={};e.toggleToActiveLink=function(e){!function(e){var t=document.querySelector("."+e).getBoundingClientRect(),n=setInterval(function(){window.pageYOffset<t.top?window.scrollBy(0,10):clearInterval(n)},.4)}(e.dataset.link)},tajam.navigation=e}(),function(){var e={};e.isEmail=function(e){return/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e)},e.isNotEmpty=function(e){return Boolean(e)},tajam.validation=e}(),function(){var e={};e.isValid=function(){var t=document.querySelectorAll('[data-valid="required"]'),n=document.querySelector("[data-email]").value;return e.isAllCompleted(t)?!!tajam.validation.isEmail(n)||(console.log("Неверный email!"),!1):(console.log("Заполните, пожалуйста, все необходимые поля!"),!1)},e.isAllCompleted=function(e){for(var t=!0,n=0;n<e.length;n++)if(!tajam.validation.isNotEmpty(e[n].value)){t=!1;break}return t},tajam.form=e}(),function(){var e=document.querySelector(".header__toggle"),t=document.querySelector(".nav"),n=document.querySelector(".form__form-section");e&&e.addEventListener("click",tajam.collapse.collapseClickHandler,!1),t&&t.addEventListener("click",function(e){var t=e.target;"a"===t.tagName.toLowerCase()&&tajam.navigation.toggleToActiveLink(t)}),n&&n.addEventListener("submit",function(e){e.preventDefault(),tajam.form.isValid()?console.log("All good"):console.log("Is not valid")}),$(".hero__main-text").owlCarousel({responsiveClass:!0,autoplay:!1,items:1,loop:!0,dots:!0,nav:!1,autoplayHoverPause:!0}),$(".testimonials__main").owlCarousel({responsiveClass:!0,autoplay:!0,smartSpeed:1e3,autoplayTimeout:2e3,items:1,loop:!0,dots:!0,nav:!0,navText:['<i class="fa fa-angle-left" aria-hidden="true"></i>','<i class="fa fa-angle-right" aria-hidden="true"></i>'],autoplayHoverPause:!1})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
